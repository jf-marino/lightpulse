{"dependencies":[{"name":"arrify","loc":{"line":3,"column":23}}],"generated":{"js":"'use strict'\n\nconst arrify = require('arrify')\n\nfunction factory (api, element) {\n  const tag = Symbol('@concordance/react.TestJsonValue')\n\n  function describe (props) {\n    const obj = props.value\n\n    const name = obj.type\n    const children = arrify(obj.children)\n    const properties = Object.assign({}, obj.props)\n    const hasProperties = Object.keys(properties).length > 0\n\n    return new DescribedTestJsonValue(Object.assign({\n      children,\n      hasProperties,\n      hasTypeFn: false,\n      name,\n      properties,\n      typeFn: null,\n      isList: children.length > 0\n    }, props))\n  }\n\n  function deserialize (state, recursor) {\n    return new DeserializedTestJsonValue(state, recursor)\n  }\n\n  class TestJsonValue extends element.ElementValue {\n    compare (expected) {\n      // Allow expected value to be a React element.\n      return (this.tag === expected.tag || expected.tag === element.tag) && this.name === expected.name\n        ? api.SHALLOW_EQUAL\n        : api.UNEQUAL\n    }\n\n    prepareDiff (expected) {\n      return {\n        // Allow expected value to be a React element.\n        compareResult: this.tag === expected.tag || expected.tag === element.tag\n          ? api.SHALLOW_EQUAL\n          : api.UNEQUAL\n      }\n    }\n  }\n  Object.defineProperty(TestJsonValue.prototype, 'tag', {value: tag})\n\n  const DescribedTestJsonValue = element.DescribedMixin(TestJsonValue)\n  const DeserializedTestJsonValue = element.DeserializedMixin(TestJsonValue)\n\n  return {\n    describe,\n    deserialize,\n    tag\n  }\n}\nmodule.exports = factory\n"},"hash":"1a8b0b429deeffca224682303546cc97"}