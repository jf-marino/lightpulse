{"dependencies":[{"name":"date-time","loc":{"line":3,"column":25}},{"name":"../constants","loc":{"line":5,"column":26}},{"name":"../formatUtils","loc":{"line":6,"column":28}},{"name":"../lineBuilder","loc":{"line":7,"column":28}},{"name":"./object","loc":{"line":8,"column":23}}],"generated":{"js":"'use strict'\n\nconst dateTime = require('date-time')\n\nconst constants = require('../constants')\nconst formatUtils = require('../formatUtils')\nconst lineBuilder = require('../lineBuilder')\nconst object = require('./object')\n\nconst SHALLOW_EQUAL = constants.SHALLOW_EQUAL\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describe (props) {\n  const date = props.value\n  const invalid = isNaN(date.valueOf())\n  return new DescribedDateValue(Object.assign({}, props, {invalid}))\n}\nexports.describe = describe\n\nfunction deserialize (state, recursor) {\n  return new DeserializedDateValue(state, recursor)\n}\nexports.deserialize = deserialize\n\nconst tag = Symbol('DateValue')\nexports.tag = tag\n\nfunction formatDate (date) {\n  // Always format in UTC. The local timezone shouldn't be used since it's most\n  // likely different from that of CI servers.\n  return dateTime({\n    date,\n    local: false,\n    showTimeZone: true,\n    showMilliseconds: true\n  })\n}\n\nclass DateValue extends object.ObjectValue {\n  constructor (props) {\n    super(props)\n    this.invalid = props.invalid\n  }\n\n  compare (expected) {\n    const result = super.compare(expected)\n    if (result !== SHALLOW_EQUAL) return result\n\n    return (this.invalid && expected.invalid) || Object.is(this.value.getTime(), expected.value.getTime())\n      ? SHALLOW_EQUAL\n      : UNEQUAL\n  }\n\n  formatShallow (theme, indent) {\n    const string = formatUtils.formatCtorAndStringTag(theme, this) + ' ' +\n      (this.invalid ? theme.date.invalid : formatUtils.wrap(theme.date.value, formatDate(this.value))) + ' ' +\n      theme.object.openBracket\n\n    return super.formatShallow(theme, indent).customize({\n      finalize (innerLines) {\n        return innerLines.isEmpty\n          ? lineBuilder.single(string + theme.object.closeBracket)\n          : lineBuilder.first(string)\n              .concat(innerLines.withFirstPrefixed(indent.increase()).stripFlags())\n              .append(lineBuilder.last(indent + theme.object.closeBracket))\n      },\n\n      maxDepth () {\n        return lineBuilder.single(string + ' ' + theme.maxDepth + ' ' + theme.object.closeBracket)\n      }\n    })\n  }\n\n  serialize () {\n    const iso = this.invalid ? null : this.value.toISOString()\n    return [this.invalid, iso, super.serialize()]\n  }\n}\nObject.defineProperty(DateValue.prototype, 'tag', { value: tag })\n\nconst DescribedDateValue = object.DescribedMixin(DateValue)\n\nclass DeserializedDateValue extends object.DeserializedMixin(DateValue) {\n  constructor (state, recursor) {\n    super(state[2], recursor)\n    this.invalid = state[0]\n    this.value = new Date(this.invalid ? NaN : state[1])\n  }\n}\n"},"hash":"87fa4ab159f74508c8a57e98494469bd"}