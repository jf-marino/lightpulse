{"dependencies":[{"name":"lodash.clonedeep","loc":{"line":3,"column":26}},{"name":"lodash.merge","loc":{"line":4,"column":22}},{"name":"./pluginRegistry","loc":{"line":6,"column":31}}],"generated":{"js":"'use strict'\n\nconst cloneDeep = require('lodash.clonedeep')\nconst merge = require('lodash.merge')\n\nconst pluginRegistry = require('./pluginRegistry')\n\nfunction freezeTheme (theme) {\n  const queue = [theme]\n  while (queue.length > 0) {\n    const object = queue.shift()\n    Object.freeze(object)\n\n    for (const key of Object.keys(object)) {\n      const value = object[key]\n      if (value !== null && typeof value === 'object') {\n        queue.push(value)\n      }\n    }\n  }\n\n  return theme\n}\n\nconst defaultTheme = freezeTheme({\n  boolean: { open: '', close: '' },\n  circular: '[Circular]',\n  date: {\n    invalid: 'invalid',\n    value: { open: '', close: '' }\n  },\n  diffGutters: {\n    actual: '- ',\n    expected: '+ ',\n    padding: '  '\n  },\n  error: {\n    ctor: { open: '(', close: ')' },\n    name: { open: '', close: '' }\n  },\n  function: {\n    name: { open: '', close: '' },\n    stringTag: { open: '', close: '' }\n  },\n  global: { open: '', close: '' },\n  item: {\n    after: ',',\n    customFormat: null,\n    increaseValueIndent: false\n  },\n  list: { openBracket: '[', closeBracket: ']' },\n  mapEntry: {\n    after: ',',\n    separator: ' => '\n  },\n  maxDepth: 'â€¦',\n  null: { open: '', close: '' },\n  number: { open: '', close: '' },\n  object: {\n    openBracket: '{',\n    closeBracket: '}',\n    ctor: { open: '', close: '' },\n    stringTag: { open: '@', close: '' },\n    secondaryStringTag: { open: '@', close: '' }\n  },\n  property: {\n    after: ',',\n    customFormat: null,\n    keyBracket: { open: '[', close: ']' },\n    separator: ': ',\n    increaseValueIndent: false\n  },\n  regexp: {\n    source: { open: '/', close: '/' },\n    flags: { open: '', close: '' },\n    separator: '---'\n  },\n  stats: { separator: '---' },\n  string: {\n    open: '',\n    close: '',\n    line: { open: \"'\", close: \"'\", escapeQuote: \"'\" },\n    multiline: { start: '`', end: '`', escapeQuote: '``' },\n    controlPicture: { open: '', close: '' },\n    diff: {\n      insert: { open: '', close: '' },\n      delete: { open: '', close: '' },\n      equal: { open: '', close: '' },\n      insertLine: { open: '', close: '' },\n      deleteLine: { open: '', close: '' }\n    }\n  },\n  symbol: { open: '', close: '' },\n  typedArray: {\n    bytes: { open: '', close: '' }\n  },\n  undefined: { open: '', close: '' }\n})\n\nconst pluginRefs = new Map()\npluginRefs.count = 0\nconst normalizedPluginThemes = new Map()\nfunction normalizePlugins (plugins) {\n  if (!Array.isArray(plugins) || plugins.length === 0) return null\n\n  const refs = []\n  const themes = []\n  for (const fromPlugin of pluginRegistry.getThemes(plugins)) {\n    if (!pluginRefs.has(fromPlugin.name)) {\n      pluginRefs.set(fromPlugin.name, pluginRefs.count++)\n    }\n\n    refs.push(pluginRefs.get(fromPlugin.name))\n    themes.push(fromPlugin.theme)\n  }\n\n  const ref = refs.join('.')\n  if (normalizedPluginThemes.has(ref)) {\n    return {\n      ref,\n      theme: normalizedPluginThemes.get(ref)\n    }\n  }\n\n  const theme = freezeTheme(themes.reduce((acc, pluginTheme) => {\n    return merge(acc, pluginTheme)\n  }, cloneDeep(defaultTheme)))\n  normalizedPluginThemes.set(ref, theme)\n  return {ref, theme}\n}\n\nconst normalizedCache = new WeakMap()\nfunction normalize (options) {\n  options = Object.assign({plugins: [], theme: null}, options)\n\n  const normalizedPlugins = normalizePlugins(options.plugins)\n  if (!options.theme) {\n    return normalizedPlugins ? normalizedPlugins.theme : defaultTheme\n  }\n\n  const entry = normalizedCache.get(options.theme) || {theme: null, withPlugins: new Map()}\n  if (!normalizedCache.has(options.theme)) normalizedCache.set(options.theme, entry)\n\n  if (normalizedPlugins) {\n    if (entry.withPlugins.has(normalizedPlugins.ref)) {\n      return entry.withPlugins.get(normalizedPlugins.ref)\n    }\n\n    const theme = freezeTheme(merge(cloneDeep(normalizedPlugins.theme), options.theme))\n    entry.withPlugins.set(normalizedPlugins.ref, theme)\n    return theme\n  }\n\n  if (!entry.theme) {\n    entry.theme = freezeTheme(merge(cloneDeep(defaultTheme), options.theme))\n  }\n  return entry.theme\n}\nexports.normalize = normalize\n\nconst modifiers = new WeakMap()\nfunction addModifier (descriptor, modifier) {\n  if (modifiers.has(descriptor)) {\n    modifiers.get(descriptor).add(modifier)\n  } else {\n    modifiers.set(descriptor, new Set([modifier]))\n  }\n}\nexports.addModifier = addModifier\n\nconst modifierCache = new WeakMap()\nconst originalCache = new WeakMap()\nfunction applyModifiers (descriptor, theme) {\n  if (!modifiers.has(descriptor)) return theme\n\n  return Array.from(modifiers.get(descriptor)).reduce((prev, modifier) => {\n    const cache = modifierCache.get(modifier) || new WeakMap()\n    if (!modifierCache.has(modifier)) modifierCache.set(modifier, cache)\n\n    if (cache.has(prev)) return cache.get(prev)\n\n    const modifiedTheme = cloneDeep(prev)\n    modifier(modifiedTheme)\n    freezeTheme(modifiedTheme)\n    cache.set(prev, modifiedTheme)\n    originalCache.set(modifiedTheme, theme)\n    return modifiedTheme\n  }, theme)\n}\nexports.applyModifiers = applyModifiers\n\nfunction applyModifiersToOriginal (descriptor, theme) {\n  return applyModifiers(descriptor, originalCache.get(theme) || theme)\n}\nexports.applyModifiersToOriginal = applyModifiersToOriginal\n"},"hash":"3d40251ac15d38a502c3a392c52af4ca"}