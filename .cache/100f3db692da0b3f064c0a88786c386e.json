{"dependencies":[{"name":"../constants","loc":{"line":3,"column":26}},{"name":"../isEnumerable","loc":{"line":4,"column":29}},{"name":"../formatUtils","loc":{"line":5,"column":28}},{"name":"../lineBuilder","loc":{"line":6,"column":28}},{"name":"../recursorUtils","loc":{"line":7,"column":30}},{"name":"./object","loc":{"line":8,"column":23}}],"generated":{"js":"'use strict'\n\nconst constants = require('../constants')\nconst isEnumerable = require('../isEnumerable')\nconst formatUtils = require('../formatUtils')\nconst lineBuilder = require('../lineBuilder')\nconst NOOP_RECURSOR = require('../recursorUtils').NOOP_RECURSOR\nconst object = require('./object')\n\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describe (props) {\n  const error = props.value\n  return new DescribedErrorValue(Object.assign({\n    nameIsEnumerable: isEnumerable(error, 'name'),\n    name: error.name,\n    messageIsEnumerable: isEnumerable(error, 'message'),\n    message: error.message\n  }, props))\n}\nexports.describe = describe\n\nfunction deserialize (state, recursor) {\n  return new DeserializedErrorValue(state, recursor)\n}\nexports.deserialize = deserialize\n\nconst tag = Symbol('ErrorValue')\nexports.tag = tag\n\nclass ErrorValue extends object.ObjectValue {\n  constructor (props) {\n    super(props)\n    this.name = props.name\n  }\n\n  compare (expected) {\n    return this.tag === expected.tag && this.name === expected.name\n      ? super.compare(expected)\n      : UNEQUAL\n  }\n\n  formatShallow (theme, indent) {\n    const name = this.name || this.ctor\n\n    let string = name\n      ? formatUtils.wrap(theme.error.name, name)\n      : formatUtils.wrap(theme.object.stringTag, this.stringTag)\n    if (this.ctor && this.ctor !== name) {\n      string += ' ' + formatUtils.wrap(theme.error.ctor, this.ctor)\n    }\n    if (this.stringTag && this.stringTag !== this.ctor && this.name && !this.name.includes(this.stringTag)) {\n      string += ' ' + formatUtils.wrap(theme.object.secondaryStringTag, this.stringTag)\n    }\n    string += ' ' + theme.object.openBracket\n\n    return super.formatShallow(theme, indent).customize({\n      finalize (innerLines) {\n        return innerLines.isEmpty\n          ? lineBuilder.single(string + theme.object.closeBracket)\n          : lineBuilder.first(string)\n              .concat(innerLines.withFirstPrefixed(indent.increase()).stripFlags())\n              .append(lineBuilder.last(indent + theme.object.closeBracket))\n      },\n\n      maxDepth () {\n        return lineBuilder.single(string + ' ' + theme.maxDepth + ' ' + theme.object.closeBracket)\n      }\n    })\n  }\n\n  serialize () {\n    return [this.name, super.serialize()]\n  }\n}\nObject.defineProperty(ErrorValue.prototype, 'tag', { value: tag })\n\nclass DescribedErrorValue extends object.DescribedMixin(ErrorValue) {\n  constructor (props) {\n    super(props)\n    this.nameIsEnumerable = props.nameIsEnumerable\n    this.messageIsEnumerable = props.messageIsEnumerable\n    this.message = props.message\n  }\n\n  createPropertyRecursor () {\n    const recursor = super.createPropertyRecursor()\n\n    let skipName = this.nameIsEnumerable\n    let emitMessage = !this.messageIsEnumerable\n\n    let size = recursor.size\n    if (skipName && size > 0) {\n      size -= 1\n    }\n    if (emitMessage) {\n      size += 1\n    }\n\n    if (size === 0) return NOOP_RECURSOR\n\n    let done = false\n    const next = () => {\n      if (done) return null\n\n      const property = recursor.next()\n      if (property) {\n        if (skipName && property.key.value === 'name') {\n          skipName = false\n          return next()\n        }\n        return property\n      }\n\n      if (emitMessage) {\n        emitMessage = false\n        return this.describeProperty('message', this.describeAny(this.message))\n      }\n\n      done = true\n      return null\n    }\n\n    return { size, next }\n  }\n}\n\nclass DeserializedErrorValue extends object.DeserializedMixin(ErrorValue) {\n  constructor (state, recursor) {\n    super(state[1], recursor)\n    this.name = state[0]\n  }\n}\n"},"hash":"935fa518e8f656cf3ed30399c0972485"}