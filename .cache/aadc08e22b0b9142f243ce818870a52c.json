{"dependencies":[{"name":"path","loc":{"line":2,"column":21}},{"name":"clean-yaml-object","loc":{"line":3,"column":32}},{"name":"stack-utils","loc":{"line":4,"column":27}},{"name":"./assert","loc":{"line":5,"column":23}},{"name":"./beautify-stack","loc":{"line":6,"column":30}},{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\nconst path = require('path');\nconst cleanYamlObject = require('clean-yaml-object');\nconst StackUtils = require('stack-utils');\nconst assert = require('./assert');\nconst beautifyStack = require('./beautify-stack');\n\nfunction isAvaAssertionError(source) {\n\treturn source instanceof assert.AssertionError;\n}\n\nfunction filter(propertyName, isRoot) {\n\treturn !isRoot || (propertyName !== 'message' && propertyName !== 'name' && propertyName !== 'stack');\n}\n\nconst stackUtils = new StackUtils();\nfunction extractSource(stack) {\n\tif (!stack) {\n\t\treturn null;\n\t}\n\n\tconst firstStackLine = stack.split('\\n')[0];\n\treturn stackUtils.parseLine(firstStackLine);\n}\nfunction buildSource(source) {\n\tif (!source) {\n\t\treturn null;\n\t}\n\n\t// Assume the CWD is the project directory. This holds since this function\n\t// is only called in test workers, which are created with their working\n\t// directory set to the project directory.\n\tconst projectDir = process.cwd();\n\n\tconst file = path.resolve(projectDir, source.file.trim());\n\tconst rel = path.relative(projectDir, file);\n\n\tconst isWithinProject = rel.split(path.sep)[0] !== '..';\n\tconst isDependency = isWithinProject && path.dirname(rel).split(path.sep).indexOf('node_modules') > -1;\n\n\treturn {\n\t\tisDependency,\n\t\tisWithinProject,\n\t\tfile,\n\t\tline: source.line\n\t};\n}\n\nmodule.exports = error => {\n\tconst stack = typeof error.stack === 'string' ?\n\t\tbeautifyStack(error.stack) :\n\t\tnull;\n\n\tconst retval = {\n\t\tavaAssertionError: isAvaAssertionError(error),\n\t\tsource: buildSource(extractSource(stack))\n\t};\n\tif (stack) {\n\t\tretval.stack = stack;\n\t}\n\n\tif (retval.avaAssertionError) {\n\t\tretval.improperUsage = error.improperUsage;\n\t\tretval.message = error.message;\n\t\tretval.name = error.name;\n\t\tretval.statements = error.statements;\n\t\tretval.values = error.values;\n\n\t\tif (error.fixedSource) {\n\t\t\tconst source = buildSource(error.fixedSource);\n\t\t\tif (source) {\n\t\t\t\tretval.source = source;\n\t\t\t}\n\t\t}\n\n\t\tif (error.assertion) {\n\t\t\tretval.assertion = error.assertion;\n\t\t}\n\t\tif (error.operator) {\n\t\t\tretval.operator = error.operator;\n\t\t}\n\t} else {\n\t\tretval.object = cleanYamlObject(error, filter); // Cleanly copy non-standard properties\n\t\tif (typeof error.message === 'string') {\n\t\t\tretval.message = error.message;\n\t\t}\n\t\tif (typeof error.name === 'string') {\n\t\t\tretval.name = error.name;\n\t\t}\n\t}\n\n\tif (typeof error.stack === 'string') {\n\t\tretval.summary = error.stack.split('\\n')[0];\n\t} else {\n\t\tretval.summary = JSON.stringify(error);\n\t}\n\n\treturn retval;\n};\n"},"hash":"64cf27d9986f64bd7aeb7269728c2fa7"}