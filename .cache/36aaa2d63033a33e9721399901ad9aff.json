{"dependencies":[],"generated":{"js":"'use strict'\n\nconst hop = Object.prototype.hasOwnProperty\n\nfunction getCtor (stringTag, value) {\n  if (value.constructor) {\n    const name = value.constructor.name\n    return typeof name === 'string' && name !== ''\n      ? name\n      : null\n  }\n\n  if (value.constructor === undefined) {\n    if (stringTag !== 'Object' || value instanceof Object) return null\n\n    // Values without a constructor, that do not inherit from `Object`, but are\n    // tagged as objects, may come from `Object.create(null)`. Or they can come\n    // from a different realm, e.g.:\n    //\n    // ```\n    // require('vm').runInNewContext(`\n    //   const Foo = function () {}\n    //   Foo.prototype.constructor = undefined\n    //   return new Foo()\n    // `)\n    // ```\n    //\n    // Treat such objects as if they came from `Object.create(null)` (in the\n    // current realm) only if they do not have inherited properties. This allows\n    // these objects to be compared with object literals.\n    //\n    // This means `Object.create(null)` is not differentiated from `{}`.\n\n    // Using `const` prevents Crankshaft optimizations\n    for (var p in value) { // eslint-disable-line no-var\n      if (!hop.call(value, p)) return null\n    }\n    return stringTag\n  }\n\n  return null\n}\nmodule.exports = getCtor\n"},"hash":"1350b4f079ba04d387d4f611bd864b70"}