{"dependencies":[],"generated":{"js":"'use strict';\n\nclass Concurrent {\n\tconstructor(runnables, bail) {\n\t\tif (!Array.isArray(runnables)) {\n\t\t\tthrow new TypeError('Expected an array of runnables');\n\t\t}\n\n\t\tthis.runnables = runnables;\n\t\tthis.bail = bail || false;\n\t}\n\n\trun() {\n\t\tlet allPassed = true;\n\n\t\tlet pending;\n\t\tlet rejectPending;\n\t\tlet resolvePending;\n\t\tconst allPromises = [];\n\t\tconst handlePromise = promise => {\n\t\t\tif (!pending) {\n\t\t\t\tpending = new Promise((resolve, reject) => {\n\t\t\t\t\trejectPending = reject;\n\t\t\t\t\tresolvePending = resolve;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tallPromises.push(promise.then(passed => {\n\t\t\t\tif (!passed) {\n\t\t\t\t\tallPassed = false;\n\n\t\t\t\t\tif (this.bail) {\n\t\t\t\t\t\t// Stop if the test failed and bail mode is on.\n\t\t\t\t\t\tresolvePending();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, rejectPending));\n\t\t};\n\n\t\tfor (const runnable of this.runnables) {\n\t\t\tconst passedOrPromise = runnable.run();\n\n\t\t\tif (!passedOrPromise) {\n\t\t\t\tif (this.bail) {\n\t\t\t\t\t// Stop if the test failed and bail mode is on.\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\tallPassed = false;\n\t\t\t} else if (passedOrPromise !== true) {\n\t\t\t\thandlePromise(passedOrPromise);\n\t\t\t}\n\t\t}\n\n\t\tif (pending) {\n\t\t\tPromise.all(allPromises).then(resolvePending);\n\t\t\treturn pending.then(() => allPassed);\n\t\t}\n\n\t\treturn allPassed;\n\t}\n}\n\nmodule.exports = Concurrent;\n"},"hash":"0844610a712c9dad8842849b473f1672"}