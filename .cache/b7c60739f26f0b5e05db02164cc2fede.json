{"dependencies":[{"name":"ansi-styles","loc":{"line":2,"column":27}},{"name":"chalk","loc":{"line":3,"column":22}},{"name":"strip-ansi","loc":{"line":4,"column":26}},{"name":"lodash.clonedeepwith","loc":{"line":5,"column":30}},{"name":"@concordance/react","loc":{"line":6,"column":28}},{"name":"./globals","loc":{"line":7,"column":24}}],"generated":{"js":"'use strict';\nconst ansiStyles = require('ansi-styles');\nconst chalk = require('chalk');\nconst stripAnsi = require('strip-ansi');\nconst cloneDeepWith = require('lodash.clonedeepwith');\nconst reactPlugin = require('@concordance/react');\nconst options = require('./globals').options;\n\n// Wrap Concordance's React plugin. Change the name to avoid collisions if in\n// the future users can register plugins themselves.\nconst avaReactPlugin = Object.assign({}, reactPlugin, {name: 'ava-plugin-react'});\nconst plugins = [avaReactPlugin];\n\nconst forceColor = new chalk.constructor({enabled: true});\n\nconst colorTheme = {\n\tboolean: ansiStyles.yellow,\n\tcircular: forceColor.grey('[Circular]'),\n\tdate: {\n\t\tinvalid: forceColor.red('invalid'),\n\t\tvalue: ansiStyles.blue\n\t},\n\tdiffGutters: {\n\t\tactual: forceColor.red('-') + ' ',\n\t\texpected: forceColor.green('+') + ' ',\n\t\tpadding: '  '\n\t},\n\terror: {\n\t\tctor: {open: ansiStyles.grey.open + '(', close: ')' + ansiStyles.grey.close},\n\t\tname: ansiStyles.magenta\n\t},\n\tfunction: {\n\t\tname: ansiStyles.blue,\n\t\tstringTag: ansiStyles.magenta\n\t},\n\tglobal: ansiStyles.magenta,\n\titem: {after: forceColor.grey(',')},\n\tlist: {openBracket: forceColor.grey('['), closeBracket: forceColor.grey(']')},\n\tmapEntry: {after: forceColor.grey(',')},\n\tmaxDepth: forceColor.grey('…'),\n\tnull: ansiStyles.yellow,\n\tnumber: ansiStyles.yellow,\n\tobject: {\n\t\topenBracket: forceColor.grey('{'),\n\t\tcloseBracket: forceColor.grey('}'),\n\t\tctor: ansiStyles.magenta,\n\t\tstringTag: {open: ansiStyles.magenta.open + '@', close: ansiStyles.magenta.close},\n\t\tsecondaryStringTag: {open: ansiStyles.grey.open + '@', close: ansiStyles.grey.close}\n\t},\n\tproperty: {\n\t\tafter: forceColor.grey(','),\n\t\tkeyBracket: {open: forceColor.grey('['), close: forceColor.grey(']')},\n\t\tvalueFallback: forceColor.grey('…')\n\t},\n\treact: {\n\t\tfunctionType: forceColor.grey('\\u235F'),\n\t\topenTag: {\n\t\t\tstart: forceColor.grey('<'),\n\t\t\tend: forceColor.grey('>'),\n\t\t\tselfClose: forceColor.grey('/'),\n\t\t\tselfCloseVoid: ' ' + forceColor.grey('/')\n\t\t},\n\t\tcloseTag: {\n\t\t\topen: forceColor.grey('</'),\n\t\t\tclose: forceColor.grey('>')\n\t\t},\n\t\ttagName: ansiStyles.magenta,\n\t\tattribute: {\n\t\t\tseparator: '=',\n\t\t\tvalue: {\n\t\t\t\topenBracket: forceColor.grey('{'),\n\t\t\t\tcloseBracket: forceColor.grey('}'),\n\t\t\t\tstring: {\n\t\t\t\t\tline: {open: forceColor.blue('\"'), close: forceColor.blue('\"'), escapeQuote: '\"'}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tchild: {\n\t\t\topenBracket: forceColor.grey('{'),\n\t\t\tcloseBracket: forceColor.grey('}')\n\t\t}\n\t},\n\tregexp: {\n\t\tsource: {open: ansiStyles.blue.open + '/', close: '/' + ansiStyles.blue.close},\n\t\tflags: ansiStyles.yellow\n\t},\n\tstats: {separator: forceColor.grey('---')},\n\tstring: {\n\t\topen: ansiStyles.blue.open,\n\t\tclose: ansiStyles.blue.close,\n\t\tline: {open: forceColor.blue('\\''), close: forceColor.blue('\\'')},\n\t\tmultiline: {start: forceColor.blue('`'), end: forceColor.blue('`')},\n\t\tcontrolPicture: ansiStyles.grey,\n\t\tdiff: {\n\t\t\tinsert: {\n\t\t\t\topen: ansiStyles.bgGreen.open + ansiStyles.black.open,\n\t\t\t\tclose: ansiStyles.black.close + ansiStyles.bgGreen.close\n\t\t\t},\n\t\t\tdelete: {\n\t\t\t\topen: ansiStyles.bgRed.open + ansiStyles.black.open,\n\t\t\t\tclose: ansiStyles.black.close + ansiStyles.bgRed.close\n\t\t\t},\n\t\t\tequal: ansiStyles.blue,\n\t\t\tinsertLine: {\n\t\t\t\topen: ansiStyles.green.open,\n\t\t\t\tclose: ansiStyles.green.close\n\t\t\t},\n\t\t\tdeleteLine: {\n\t\t\t\topen: ansiStyles.red.open,\n\t\t\t\tclose: ansiStyles.red.close\n\t\t\t}\n\t\t}\n\t},\n\tsymbol: ansiStyles.yellow,\n\ttypedArray: {\n\t\tbytes: ansiStyles.yellow\n\t},\n\tundefined: ansiStyles.yellow\n};\n\nconst plainTheme = cloneDeepWith(colorTheme, value => {\n\tif (typeof value === 'string') {\n\t\treturn stripAnsi(value);\n\t}\n});\n\nconst theme = options.color === false ? plainTheme : colorTheme;\nexports.default = {maxDepth: 3, plugins, theme};\nexports.diff = {maxDepth: 1, plugins, theme};\nexports.snapshotManager = {plugins, theme: plainTheme};\n"},"hash":"3b8f8dd2d98f7e6de2602365a568ddb2"}