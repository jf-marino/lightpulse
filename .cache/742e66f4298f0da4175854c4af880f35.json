{"dependencies":[{"name":"stack-utils","loc":{"line":2,"column":27}},{"name":"clean-stack","loc":{"line":3,"column":27}},{"name":"debug","loc":{"line":4,"column":22}}],"generated":{"js":"'use strict';\nconst StackUtils = require('stack-utils');\nconst cleanStack = require('clean-stack');\nconst debug = require('debug')('ava');\n\n// Ignore unimportant stack trace lines\nlet ignoreStackLines = [];\n\nconst avaInternals = /\\/ava\\/(?:lib\\/)?[\\w-]+\\.js:\\d+:\\d+\\)?$/;\nconst avaDependencies = /\\/node_modules\\/(?:bluebird|empower-core|(?:ava\\/node_modules\\/)?(?:babel-runtime|core-js))\\//;\nconst stackFrameLine = /^.+( \\(.+:\\d+:\\d+\\)|:\\d+:\\d+)$/;\n\nif (!debug.enabled) {\n\tignoreStackLines = StackUtils.nodeInternals();\n\tignoreStackLines.push(avaInternals);\n\tignoreStackLines.push(avaDependencies);\n}\n\nconst stackUtils = new StackUtils({internals: ignoreStackLines});\n\nfunction extractFrames(stack) {\n\treturn stack\n\t\t.split('\\n')\n\t\t.map(line => line.trim())\n\t\t.filter(line => stackFrameLine.test(line))\n\t\t.join('\\n');\n}\n\n/**\n * Given a string value of the format generated for the `stack` property of a\n * V8 error object, return a string that contains only stack frame information\n * for frames that have relevance to the consumer.\n *\n * For example, given the following string value:\n *\n * ```\n * Error\n *     at inner (/home/ava/ex.js:7:12)\n *     at /home/ava/ex.js:12:5\n *     at outer (/home/ava/ex.js:13:4)\n *     at Object.<anonymous> (/home/ava/ex.js:14:3)\n *     at Module._compile (module.js:570:32)\n *     at Object.Module._extensions..js (module.js:579:10)\n *     at Module.load (module.js:487:32)\n *     at tryModuleLoad (module.js:446:12)\n *     at Function.Module._load (module.js:438:3)\n *     at Module.runMain (module.js:604:10)\n * ```\n *\n * ...this function returns the following string value:\n *\n * ```\n * inner (/home/ava/ex.js:7:12)\n * /home/ava/ex.js:12:5\n * outer (/home/ava/ex.js:13:4)\n * Object.<anonymous> (/home/ava/ex.js:14:3)\n * ```\n */\nmodule.exports = stack => {\n\tif (!stack) {\n\t\treturn '';\n\t}\n\n\tstack = extractFrames(stack);\n\t// Workaround for https://github.com/tapjs/stack-utils/issues/14\n\t// TODO: fix it in `stack-utils`\n\tstack = cleanStack(stack);\n\n\treturn stackUtils.clean(stack)\n\t\t// Remove the trailing newline inserted by the `stack-utils` module\n\t\t.trim();\n};\n"},"hash":"3f64b229fcb98679b1853280c07810e9"}