{"dependencies":[],"generated":{"js":"'use strict'\n\nfunction diffShallow (api, actual, expected, theme, indent) {\n  const childBuffer = api.lineBuilder.buffer()\n  const propertyBuffer = api.lineBuilder.buffer()\n\n  return {\n    append (formatted, origin) {\n      if (origin.isItem === true) {\n        childBuffer.append(formatted)\n      } else {\n        propertyBuffer.append(formatted)\n      }\n    },\n\n    finalize: () => {\n      const namesAreEqual = actual.compareNames(expected)\n      const actualName = actual.formatName(theme)\n      const expectedName = expected.formatName(theme)\n\n      const openTag = theme.react.openTag\n      const innerIndentation = indent.increase()\n\n      const allChildren = childBuffer.withFirstPrefixed(innerIndentation)\n      const children = allChildren.decompose()\n\n      const allProperties = propertyBuffer.withFirstPrefixed(innerIndentation)\n      const properties = allProperties.decompose()\n      // If the first properties are also the last, and either side has no\n      // children, ensure the properties are treated as being last. This\n      // leads to a better balanced diff.\n      if (properties.remaining.isEmpty && (!actual.hasChildren || !expected.hasChildren)) {\n        properties.last = properties.first\n        properties.first = {actual: api.lineBuilder.buffer(), expected: api.lineBuilder.buffer()}\n      }\n\n      const result = api.lineBuilder.buffer()\n\n      // Create a custom diff that is as neat as possible. It's likely\n      // there's a generic algorithm that can be used, but for expediency's\n      // sake handles all possible diffs by brute force instead.\n      if (actual.hasProperties && expected.hasProperties) {\n        if (namesAreEqual) {\n          result\n            .append(api.lineBuilder.first(openTag.start + actualName))\n            .append(properties.first.actual.stripFlags())\n            .append(properties.first.expected.stripFlags())\n        } else {\n          result\n            .append(api.lineBuilder.actual.first(openTag.start + actualName))\n            .append(properties.first.actual.stripFlags())\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName))\n            .append(properties.first.expected.stripFlags())\n        }\n        result.append(properties.remaining.stripFlags())\n\n        if (actual.hasChildren && expected.hasChildren) {\n          result\n            .append(properties.last.actual.stripFlags())\n            .append(properties.last.expected.stripFlags())\n            .append(api.lineBuilder.line(indent + openTag.end))\n\n          if (namesAreEqual) {\n            result\n              .append(allChildren.stripFlags())\n              .append(api.lineBuilder.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n          } else {\n            result\n              .append(children.first.actual.stripFlags())\n              .append(children.first.expected.stripFlags())\n              .append(children.remaining.stripFlags())\n              .append(children.last.actual.stripFlags())\n              .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n          }\n        } else if (actual.hasChildren) {\n          result\n            .append(properties.last.actual.stripFlags())\n            .append(api.lineBuilder.actual.line(indent + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n            .append(properties.last.expected.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + openTag.selfClose + openTag.end))\n        } else if (expected.hasChildren) {\n          result\n            .append(properties.last.actual.stripFlags())\n            .append(api.lineBuilder.actual.last(indent + openTag.selfClose + openTag.end))\n            .append(properties.last.expected.stripFlags())\n            .append(api.lineBuilder.expected.line(indent + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n        } else {\n          result\n            .append(properties.last.actual.stripFlags())\n            .append(properties.last.expected.stripFlags())\n            .append(api.lineBuilder.last(indent + openTag.selfClose + openTag.end))\n        }\n      } else if (actual.hasProperties) {\n        result\n          .append(api.lineBuilder.actual.first(openTag.start + actualName))\n          .append(allProperties.stripFlags())\n\n        if (actual.hasChildren && expected.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.line(indent + openTag.end))\n            .append(children.first.actual.stripFlags())\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName + openTag.end))\n            .append(children.first.expected.stripFlags())\n            .append(children.remaining.stripFlags())\n\n          if (namesAreEqual) {\n            result\n              .append(children.last.actual.stripFlags())\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n          } else {\n            result\n              .append(children.last.actual.stripFlags())\n              .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n          }\n        } else if (actual.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.last(indent + openTag.selfClose + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n            .append(api.lineBuilder.expected.single(openTag.start + expectedName + openTag.selfCloseVoid + openTag.end))\n        } else if (expected.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.last(indent + openTag.selfClose + openTag.end))\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n        } else {\n          result\n            .append(api.lineBuilder.actual.last(indent + openTag.selfClose + openTag.end))\n            .append(api.lineBuilder.expected.single(openTag.start + expectedName + openTag.selfCloseVoid + openTag.end))\n        }\n      } else if (expected.hasProperties) {\n        if (actual.hasChildren && expected.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.first(openTag.start + actualName + openTag.end))\n            .append(children.first.actual.stripFlags())\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName))\n            .append(allProperties.stripFlags())\n            .append(api.lineBuilder.expected.line(indent + openTag.end))\n            .append(children.first.expected.stripFlags())\n            .append(children.remaining.stripFlags())\n\n          if (namesAreEqual) {\n            result\n              .append(children.last.actual.stripFlags())\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n          } else {\n            result\n              .append(children.last.actual.stripFlags())\n              .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n          }\n        } else if (actual.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.first(openTag.start + actualName + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName))\n            .append(allProperties.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + openTag.selfClose + openTag.end))\n        } else if (expected.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.single(openTag.start + actualName + openTag.selfCloseVoid + openTag.end))\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName))\n            .append(allProperties.stripFlags())\n            .append(api.lineBuilder.expected.line(indent + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n        } else {\n          result\n            .append(api.lineBuilder.actual.single(openTag.start + actualName + openTag.selfCloseVoid + openTag.end))\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName))\n            .append(allProperties.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + openTag.selfCloseVoid + openTag.end))\n        }\n      } else {\n        if (actual.hasChildren && expected.hasChildren) {\n          if (namesAreEqual) {\n            result\n              .append(api.lineBuilder.first(openTag.start + actualName + openTag.end))\n              .append(allChildren.stripFlags())\n              .append(api.lineBuilder.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n          } else {\n            result\n              .append(api.lineBuilder.actual.first(openTag.start + actualName + openTag.end))\n              .append(children.first.actual.stripFlags())\n              .append(api.lineBuilder.expected.first(openTag.start + expectedName + openTag.end))\n              .append(children.first.expected.stripFlags())\n              .append(children.remaining.stripFlags())\n              .append(children.last.actual.stripFlags())\n              .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n              .append(children.last.expected.stripFlags())\n              .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, expectedName)))\n          }\n        } else if (actual.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.first(openTag.start + actualName + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.actual.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n            .append(api.lineBuilder.expected.single(openTag.start + expectedName + openTag.selfCloseVoid + openTag.end))\n        } else if (expected.hasChildren) {\n          result\n            .append(api.lineBuilder.actual.single(openTag.start + actualName + openTag.selfCloseVoid + openTag.end))\n            .append(api.lineBuilder.expected.first(openTag.start + expectedName + openTag.end))\n            .append(allChildren.stripFlags())\n            .append(api.lineBuilder.expected.last(indent + api.wrapFromTheme(theme.react.closeTag, actualName)))\n        } else {\n          if (namesAreEqual) {\n            result.append(api.lineBuilder.single(openTag.start + actualName + openTag.selfCloseVoid + openTag.end))\n          } else {\n            result\n              .append(api.lineBuilder.actual.single(openTag.start + actualName + openTag.selfCloseVoid + openTag.end))\n              .append(api.lineBuilder.expected.single(openTag.start + expectedName + openTag.selfCloseVoid + openTag.end))\n          }\n        }\n      }\n\n      return result\n    },\n\n    shouldFormat (subject) {\n      return subject.isItem === true || subject.isProperty === true\n    },\n\n    increaseIndent: true\n  }\n}\nmodule.exports = diffShallow\n"},"hash":"57d9fe3b1a70445c156efd71fb7f4a3e"}