{"dependencies":[{"name":"events","loc":{"line":2,"column":29}},{"name":"path","loc":{"line":3,"column":21}},{"name":"bluebird","loc":{"line":4,"column":25}},{"name":"option-chain","loc":{"line":5,"column":28}},{"name":"matcher","loc":{"line":6,"column":24}},{"name":"./snapshot-manager","loc":{"line":7,"column":32}},{"name":"./test-collection","loc":{"line":8,"column":31}},{"name":"./validate-test","loc":{"line":9,"column":29}}],"generated":{"js":"\"use strict\";const t=require(\"events\"),s=require(\"path\"),e=require(\"bluebird\"),i=require(\"option-chain\"),a=require(\"matcher\"),r=require(\"./snapshot-manager\"),o=require(\"./test-collection\"),n=require(\"./validate-test\"),h={defaults:{type:\"test\",serial:!1,exclusive:!1,skipped:!1,todo:!1,failing:!1,callback:!1,always:!1},chainableMethods:{test:{},serial:{serial:!0},before:{type:\"before\"},after:{type:\"after\"},skip:{skipped:!0},todo:{todo:!0},failing:{failing:!0},only:{exclusive:!0},beforeEach:{type:\"beforeEach\"},afterEach:{type:\"afterEach\"},cb:{callback:!0},always:{always:!0}}};function l(t,s){return function(e){return t.apply(this,[e].concat(s))}}class u extends t{constructor(t){super(),t=t||{},this.file=t.file,this.match=t.match||[],this.projectDir=t.projectDir,this.serial=t.serial,this.updateSnapshots=t.updateSnapshots,this.snapshotDir=t.snapshotDir,this.hasStarted=!1,this.results=[],this.snapshots=null,this.tests=new o({bail:t.bail,failWithoutAssertions:t.failWithoutAssertions,compareTestSnapshot:this.compareTestSnapshot.bind(this)}),this.chain=i(h,(t,s)=>{let e,i,a;if(this.hasStarted)throw new Error(\"All tests and hooks must be declared synchronously in your test file, and cannot be nested within other tests or hooks.\");\"string\"==typeof s[0]?(e=s[0],i=s[1],a=2):(i=s[0],e=null,a=1),this.serial&&(t.serial=!0),s=s.length>a?s.slice(a):null,Array.isArray(i)?i.forEach(i=>{this.addTest(e,t,i,s)}):this.addTest(e,t,i,s)})}addTest(t,s,e,i){i&&(e.title&&(t=e.title.apply(e,[t||\"\"].concat(i))),e=l(e,i)),\"test\"===s.type&&this.match.length>0&&(s.exclusive=1===a([t||\"\"],this.match).length);const r=n(t,e,s);if(null!==r)throw new TypeError(r);this.tests.add({metadata:s,fn:e,title:t})}addTestResult(t){const s=t.result,e={logs:s.logs,duration:s.duration,title:s.title,error:t.reason,type:s.metadata.type,skip:s.metadata.skipped,todo:s.metadata.todo,failing:s.metadata.failing};this.results.push(t),this.emit(\"test\",e)}buildStats(){const t={failCount:0,knownFailureCount:0,passCount:0,skipCount:0,testCount:0,todoCount:0};for(const s of this.results){s.passed||t.failCount++;const e=s.result.metadata;\"test\"===e.type&&(t.testCount++,e.skipped?t.skipCount++:e.todo?t.todoCount++:s.passed&&(e.failing?t.knownFailureCount++:t.passCount++))}return t}compareTestSnapshot(t){return this.snapshots||(this.snapshots=r.load({file:this.file,fixedLocation:this.snapshotDir,name:s.basename(this.file),projectDir:this.projectDir,relFile:s.relative(this.projectDir,this.file),testDir:s.dirname(this.file),updating:this.updateSnapshots}),this.emit(\"dependency\",this.snapshots.snapPath)),this.snapshots.compare(t)}saveSnapshotState(){if(this.snapshots){const t=this.snapshots.save();t&&this.emit(\"touched\",t)}else this.updateSnapshots}run(t){return t.runOnlyExclusive&&!this.tests.hasExclusive?Promise.resolve(null):(this.hasStarted=!0,this.tests.on(\"test\",t=>{this.addTestResult(t)}),e.try(()=>this.tests.build().run()))}attributeLeakedError(t){return this.tests.attributeLeakedError(t)}}module.exports=u;"},"hash":"e9c616a5611f2c2eb2a0b045092093a6"}