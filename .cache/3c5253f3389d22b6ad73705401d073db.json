{"dependencies":[{"name":"fast-diff","loc":{"line":3,"column":25}},{"name":"esutils","loc":{"line":4,"column":24}},{"name":"../constants","loc":{"line":6,"column":26}},{"name":"../formatUtils","loc":{"line":7,"column":28}},{"name":"../lineBuilder","loc":{"line":8,"column":28}}],"generated":{"js":"'use strict'\n\nconst fastDiff = require('fast-diff')\nconst keyword = require('esutils').keyword\n\nconst constants = require('../constants')\nconst formatUtils = require('../formatUtils')\nconst lineBuilder = require('../lineBuilder')\n\nconst DEEP_EQUAL = constants.DEEP_EQUAL\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describe (value) {\n  return new StringValue(value)\n}\nexports.describe = describe\n\nexports.deserialize = describe\n\nconst tag = Symbol('StringValue')\nexports.tag = tag\n\n// TODO: Escape invisible characters (e.g. zero-width joiner, non-breaking space),\n// ambiguous characters (other kinds of spaces, combining characters). Use\n// http://graphemica.com/blocks/control-pictures where applicable.\nfunction basicEscape (string) {\n  return string.replace(/\\\\/g, '\\\\\\\\')\n}\n\nconst CRLF_CONTROL_PICTURE = '\\u240D\\u240A'\nconst LF_CONTROL_PICTURE = '\\u240A'\nconst CR_CONTROL_PICTURE = '\\u240D'\n\nconst MATCH_CONTROL_PICTURES = new RegExp(`${CR_CONTROL_PICTURE}|${LF_CONTROL_PICTURE}|${CR_CONTROL_PICTURE}`, 'g')\n\nfunction escapeLinebreak (string) {\n  if (string === '\\r\\n') return CRLF_CONTROL_PICTURE\n  if (string === '\\n') return LF_CONTROL_PICTURE\n  if (string === '\\r') return CR_CONTROL_PICTURE\n  return string\n}\n\nfunction themeControlPictures (theme, resetWrap, str) {\n  return str.replace(MATCH_CONTROL_PICTURES, picture => {\n    return resetWrap.close + formatUtils.wrap(theme.string.controlPicture, picture) + resetWrap.open\n  })\n}\n\nconst MATCH_SINGLE_QUOTE = /'/g\nconst MATCH_DOUBLE_QUOTE = /\"/g\nconst MATCH_BACKTICKS = /`/g\nfunction escapeQuotes (line, string) {\n  const quote = line.escapeQuote\n  if (quote === '\\'') return string.replace(MATCH_SINGLE_QUOTE, \"\\\\'\")\n  if (quote === '\"') return string.replace(MATCH_DOUBLE_QUOTE, '\\\\\"')\n  if (quote === '`') return string.replace(MATCH_BACKTICKS, '\\\\`')\n  return string\n}\n\nfunction includesLinebreaks (string) {\n  return string.includes('\\r') || string.includes('\\n')\n}\n\nfunction diffLine (theme, actual, expected) {\n  const outcome = fastDiff(actual, expected)\n\n  // TODO: Compute when line is mostly unequal (80%? 90%?) and treat it as being\n  // completely unequal.\n  const isPartiallyEqual = !(\n    (outcome.length === 2 && outcome[0][1] === actual && outcome[1][1] === expected) ||\n    // Discount line ending control pictures, which will be equal even when the\n    // rest of the line isn't.\n    (\n      outcome.length === 3 &&\n      outcome[2][0] === fastDiff.EQUAL &&\n      MATCH_CONTROL_PICTURES.test(outcome[2][1]) &&\n      outcome[0][1] + outcome[2][1] === actual &&\n      outcome[1][1] + outcome[2][1] === expected\n    )\n  )\n\n  let stringActual = ''\n  let stringExpected = ''\n\n  const noopWrap = { open: '', close: '' }\n  const deleteWrap = isPartiallyEqual ? theme.string.diff.delete : noopWrap\n  const insertWrap = isPartiallyEqual ? theme.string.diff.insert : noopWrap\n  const equalWrap = isPartiallyEqual ? theme.string.diff.equal : noopWrap\n  for (const diff of outcome) {\n    if (diff[0] === fastDiff.DELETE) {\n      stringActual += formatUtils.wrap(deleteWrap, diff[1])\n    } else if (diff[0] === fastDiff.INSERT) {\n      stringExpected += formatUtils.wrap(insertWrap, diff[1])\n    } else {\n      const string = formatUtils.wrap(equalWrap, themeControlPictures(theme, equalWrap, diff[1]))\n      stringActual += string\n      stringExpected += string\n    }\n  }\n\n  if (!isPartiallyEqual) {\n    stringActual = formatUtils.wrap(theme.string.diff.deleteLine, stringActual)\n    stringExpected = formatUtils.wrap(theme.string.diff.insertLine, stringExpected)\n  }\n\n  return [stringActual, stringExpected]\n}\n\nconst LINEBREAKS = /\\r\\n|\\r|\\n/g\n\nfunction gatherLines (string) {\n  const lines = []\n  let prevIndex = 0\n  for (let match; (match = LINEBREAKS.exec(string)); prevIndex = match.index + match[0].length) {\n    lines.push(string.slice(prevIndex, match.index) + escapeLinebreak(match[0]))\n  }\n  lines.push(string.slice(prevIndex))\n  return lines\n}\n\nclass StringValue {\n  constructor (value) {\n    this.value = value\n  }\n\n  compare (expected) {\n    return expected.tag === tag && this.value === expected.value\n      ? DEEP_EQUAL\n      : UNEQUAL\n  }\n\n  get includesLinebreaks () {\n    return includesLinebreaks(this.value)\n  }\n\n  formatDeep (theme, indent) {\n    // Escape backslashes\n    let escaped = basicEscape(this.value)\n\n    if (!this.includesLinebreaks) {\n      escaped = escapeQuotes(theme.string.line, escaped)\n      return lineBuilder.single(formatUtils.wrap(theme.string.line, formatUtils.wrap(theme.string, escaped)))\n    }\n\n    escaped = escapeQuotes(theme.string.multiline, escaped)\n    const lineStrings = gatherLines(escaped).map(string => {\n      return formatUtils.wrap(theme.string, themeControlPictures(theme, theme.string, string))\n    })\n    const lastIndex = lineStrings.length - 1\n    const indentation = indent\n    return lineBuilder.buffer()\n      .append(\n        lineStrings.map((string, index) => {\n          if (index === 0) return lineBuilder.first(theme.string.multiline.start + string)\n          if (index === lastIndex) return lineBuilder.last(indentation + string + theme.string.multiline.end)\n          return lineBuilder.line(indentation + string)\n        }))\n  }\n\n  formatAsKey (theme) {\n    const key = this.value\n    if (keyword.isIdentifierNameES6(key, true) || String(parseInt(key, 10)) === key) {\n      return key\n    }\n\n    const escaped = basicEscape(key)\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/'/g, \"\\\\'\")\n    return formatUtils.wrap(theme.string.line, formatUtils.wrap(theme.string, escaped))\n  }\n\n  diffDeep (expected, theme, indent) {\n    if (expected.tag !== tag) return null\n\n    const escapedActual = basicEscape(this.value)\n    const escapedExpected = basicEscape(expected.value)\n\n    if (!includesLinebreaks(escapedActual) && !includesLinebreaks(escapedExpected)) {\n      const result = diffLine(theme,\n        escapeQuotes(theme.string.line, escapedActual),\n        escapeQuotes(theme.string.line, escapedExpected))\n\n      return lineBuilder.actual.single(formatUtils.wrap(theme.string.line, result[0]))\n        .concat(lineBuilder.expected.single(formatUtils.wrap(theme.string.line, result[1])))\n    }\n\n    const actualLines = gatherLines(escapeQuotes(theme.string.multiline, escapedActual))\n    const expectedLines = gatherLines(escapeQuotes(theme.string.multiline, escapedExpected))\n\n    const indentation = indent\n    const lines = lineBuilder.buffer()\n    const lastActualIndex = actualLines.length - 1\n    const lastExpectedIndex = expectedLines.length - 1\n\n    let actualBuffer = []\n    let expectedBuffer = []\n    let mustOpenNextExpected = false\n    for (let actualIndex = 0, expectedIndex = 0, extraneousOffset = 0; actualIndex < actualLines.length;) {\n      if (actualLines[actualIndex] === expectedLines[expectedIndex]) {\n        lines.append(actualBuffer)\n        lines.append(expectedBuffer)\n        actualBuffer = []\n        expectedBuffer = []\n\n        let string = actualLines[actualIndex]\n        string = themeControlPictures(theme, theme.string.diff.equal, string)\n        string = formatUtils.wrap(theme.string.diff.equal, string)\n\n        if (actualIndex === 0) {\n          lines.append(lineBuilder.first(theme.string.multiline.start + string))\n        } else if (actualIndex === lastActualIndex && expectedIndex === lastExpectedIndex) {\n          lines.append(lineBuilder.last(indentation + string + theme.string.multiline.end))\n        } else {\n          lines.append(lineBuilder.line(indentation + string))\n        }\n\n        actualIndex++\n        expectedIndex++\n        continue\n      }\n\n      let expectedIsMissing = false\n      {\n        const compare = actualLines[actualIndex]\n        for (let index = expectedIndex; !expectedIsMissing && index < expectedLines.length; index++) {\n          expectedIsMissing = compare === expectedLines[index]\n        }\n      }\n\n      let actualIsExtraneous = (actualIndex - extraneousOffset) > lastExpectedIndex\n      if (!actualIsExtraneous) {\n        const compare = expectedLines[expectedIndex]\n        for (let index = actualIndex; !actualIsExtraneous && index < actualLines.length; index++) {\n          actualIsExtraneous = compare === actualLines[index]\n        }\n\n        if (!actualIsExtraneous && (actualIndex - extraneousOffset) === lastExpectedIndex && actualIndex < lastActualIndex) {\n          actualIsExtraneous = true\n        }\n      }\n\n      if (actualIsExtraneous && !expectedIsMissing) {\n        const string = formatUtils.wrap(theme.string.diff.deleteLine, actualLines[actualIndex])\n\n        if (actualIndex === 0) {\n          actualBuffer.push(lineBuilder.actual.first(theme.string.multiline.start + string))\n          mustOpenNextExpected = true\n        } else if (actualIndex === lastActualIndex) {\n          actualBuffer.push(lineBuilder.actual.last(indentation + string + theme.string.multiline.end))\n        } else {\n          actualBuffer.push(lineBuilder.actual.line(indentation + string))\n        }\n\n        actualIndex++\n        extraneousOffset++\n      } else if (expectedIsMissing && !actualIsExtraneous) {\n        const string = formatUtils.wrap(theme.string.diff.insertLine, expectedLines[expectedIndex])\n\n        if (mustOpenNextExpected) {\n          expectedBuffer.push(lineBuilder.expected.first(theme.string.multiline.start + string))\n          mustOpenNextExpected = false\n        } else if (expectedIndex === lastExpectedIndex) {\n          expectedBuffer.push(lineBuilder.expected.last(indentation + string + theme.string.multiline.end))\n        } else {\n          expectedBuffer.push(lineBuilder.expected.line(indentation + string))\n        }\n\n        expectedIndex++\n      } else {\n        const result = diffLine(theme, actualLines[actualIndex], expectedLines[expectedIndex])\n\n        if (actualIndex === 0) {\n          actualBuffer.push(lineBuilder.actual.first(theme.string.multiline.start + result[0]))\n          mustOpenNextExpected = true\n        } else if (actualIndex === lastActualIndex) {\n          actualBuffer.push(lineBuilder.actual.last(indentation + result[0] + theme.string.multiline.end))\n        } else {\n          actualBuffer.push(lineBuilder.actual.line(indentation + result[0]))\n        }\n\n        if (mustOpenNextExpected) {\n          expectedBuffer.push(lineBuilder.expected.first(theme.string.multiline.start + result[1]))\n          mustOpenNextExpected = false\n        } else if (expectedIndex === lastExpectedIndex) {\n          expectedBuffer.push(lineBuilder.expected.last(indentation + result[1] + theme.string.multiline.end))\n        } else {\n          expectedBuffer.push(lineBuilder.expected.line(indentation + result[1]))\n        }\n\n        actualIndex++\n        expectedIndex++\n      }\n    }\n\n    lines.append(actualBuffer)\n    lines.append(expectedBuffer)\n    return lines\n  }\n\n  serialize () {\n    return this.value\n  }\n}\nObject.defineProperty(StringValue.prototype, 'isPrimitive', { value: true })\nObject.defineProperty(StringValue.prototype, 'tag', { value: tag })\n"},"hash":"36638126b7dd6b110ef13b1937b72428"}