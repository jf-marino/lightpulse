{"dependencies":[{"name":"../constants","loc":{"line":3,"column":26}},{"name":"../recursorUtils","loc":{"line":4,"column":30}},{"name":"./object","loc":{"line":5,"column":23}}],"generated":{"js":"'use strict'\n\nconst constants = require('../constants')\nconst recursorUtils = require('../recursorUtils')\nconst object = require('./object')\n\nconst SHALLOW_EQUAL = constants.SHALLOW_EQUAL\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describe (props) {\n  return new DescribedMapValue(Object.assign({\n    size: props.value.size\n  }, props))\n}\nexports.describe = describe\n\nfunction deserialize (state, recursor) {\n  return new DeserializedMapValue(state, recursor)\n}\nexports.deserialize = deserialize\n\nconst tag = Symbol('MapValue')\nexports.tag = tag\n\nclass MapValue extends object.ObjectValue {\n  constructor (props) {\n    super(props)\n    this.size = props.size\n  }\n\n  compare (expected) {\n    const result = super.compare(expected)\n    if (result !== SHALLOW_EQUAL) return result\n\n    return this.size === expected.size\n      ? SHALLOW_EQUAL\n      : UNEQUAL\n  }\n\n  prepareDiff (expected) {\n    // Maps should be compared, even if they have a different number of entries.\n    return {compareResult: super.compare(expected)}\n  }\n\n  serialize () {\n    return [this.size, super.serialize()]\n  }\n}\nObject.defineProperty(MapValue.prototype, 'tag', { value: tag })\n\nclass DescribedMapValue extends object.DescribedMixin(MapValue) {\n  createIterableRecursor () {\n    const size = this.size\n    if (size === 0) return recursorUtils.NOOP_RECURSOR\n\n    let index = 0\n    let entries\n    const next = () => {\n      if (index === size) return null\n\n      if (!entries) {\n        entries = Array.from(this.value)\n      }\n\n      const entry = entries[index++]\n      return this.describeMapEntry(this.describeAny(entry[0]), this.describeAny(entry[1]))\n    }\n\n    return { size, next }\n  }\n}\n\nclass DeserializedMapValue extends object.DeserializedMixin(MapValue) {\n  constructor (state, recursor) {\n    super(state[1], recursor)\n    this.size = state[0]\n  }\n}\n"},"hash":"1e7a1f1b37827ebcd414cb0e52971d3f"}