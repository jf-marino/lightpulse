{"dependencies":[{"name":"./complexValues/arguments","loc":{"line":3,"column":31}},{"name":"./complexValues/arrayBuffer","loc":{"line":4,"column":33}},{"name":"./complexValues/boxed","loc":{"line":5,"column":27}},{"name":"./complexValues/dataView","loc":{"line":6,"column":30}},{"name":"./complexValues/date","loc":{"line":7,"column":26}},{"name":"./complexValues/error","loc":{"line":8,"column":27}},{"name":"./complexValues/function","loc":{"line":9,"column":30}},{"name":"./complexValues/global","loc":{"line":10,"column":28}},{"name":"./complexValues/map","loc":{"line":11,"column":25}},{"name":"./complexValues/object","loc":{"line":12,"column":28}},{"name":"./complexValues/promise","loc":{"line":13,"column":29}},{"name":"./complexValues/regexp","loc":{"line":14,"column":28}},{"name":"./complexValues/set","loc":{"line":15,"column":25}},{"name":"./complexValues/typedArray","loc":{"line":16,"column":32}},{"name":"./metaDescriptors/item","loc":{"line":18,"column":31}},{"name":"./metaDescriptors/mapEntry","loc":{"line":19,"column":35}},{"name":"./metaDescriptors/property","loc":{"line":20,"column":35}},{"name":"./primitiveValues/boolean","loc":{"line":22,"column":29}},{"name":"./primitiveValues/null","loc":{"line":23,"column":26}},{"name":"./primitiveValues/number","loc":{"line":24,"column":28}},{"name":"./primitiveValues/string","loc":{"line":25,"column":28}},{"name":"./primitiveValues/symbol","loc":{"line":26,"column":28}},{"name":"./primitiveValues/undefined","loc":{"line":27,"column":31}},{"name":"./getCtor","loc":{"line":29,"column":24}},{"name":"./getStringTag","loc":{"line":30,"column":29}},{"name":"./pluginRegistry","loc":{"line":31,"column":31}},{"name":"./Registry","loc":{"line":32,"column":25}}],"generated":{"js":"'use strict'\n\nconst argumentsValue = require('./complexValues/arguments')\nconst arrayBufferValue = require('./complexValues/arrayBuffer')\nconst boxedValue = require('./complexValues/boxed')\nconst dataViewValue = require('./complexValues/dataView')\nconst dateValue = require('./complexValues/date')\nconst errorValue = require('./complexValues/error')\nconst functionValue = require('./complexValues/function')\nconst globalValue = require('./complexValues/global')\nconst mapValue = require('./complexValues/map')\nconst objectValue = require('./complexValues/object')\nconst promiseValue = require('./complexValues/promise')\nconst regexpValue = require('./complexValues/regexp')\nconst setValue = require('./complexValues/set')\nconst typedArrayValue = require('./complexValues/typedArray')\n\nconst itemDescriptor = require('./metaDescriptors/item')\nconst mapEntryDescriptor = require('./metaDescriptors/mapEntry')\nconst propertyDescriptor = require('./metaDescriptors/property')\n\nconst booleanValue = require('./primitiveValues/boolean')\nconst nullValue = require('./primitiveValues/null')\nconst numberValue = require('./primitiveValues/number')\nconst stringValue = require('./primitiveValues/string')\nconst symbolValue = require('./primitiveValues/symbol')\nconst undefinedValue = require('./primitiveValues/undefined')\n\nconst getCtor = require('./getCtor')\nconst getStringTag = require('./getStringTag')\nconst pluginRegistry = require('./pluginRegistry')\nconst Registry = require('./Registry')\n\nconst SpecializedComplexes = new Map([\n  ['Arguments', argumentsValue.describe],\n  ['ArrayBuffer', arrayBufferValue.describe],\n  ['DataView', dataViewValue.describe],\n  ['Date', dateValue.describe],\n  ['Error', errorValue.describe],\n  ['Float32Array', typedArrayValue.describe],\n  ['Float64Array', typedArrayValue.describe],\n  ['Function', functionValue.describe],\n  ['GeneratorFunction', functionValue.describe],\n  ['global', globalValue.describe],\n  ['Int16Array', typedArrayValue.describe],\n  ['Int32Array', typedArrayValue.describe],\n  ['Int8Array', typedArrayValue.describe],\n  ['Map', mapValue.describe],\n  ['Promise', promiseValue.describe],\n  ['RegExp', regexpValue.describe],\n  ['Set', setValue.describe],\n  ['Uint16Array', typedArrayValue.describe],\n  ['Uint32Array', typedArrayValue.describe],\n  ['Uint8Array', typedArrayValue.describe],\n  ['Uint8ClampedArray', typedArrayValue.describe]\n])\n\nfunction describePrimitive (value) {\n  if (value === null) return nullValue.describe()\n  if (value === undefined) return undefinedValue.describe()\n  if (value === true || value === false) return booleanValue.describe(value)\n\n  const type = typeof value\n  if (type === 'number') return numberValue.describe(value)\n  if (type === 'string') return stringValue.describe(value)\n  if (type === 'symbol') return symbolValue.describe(value)\n\n  return null\n}\n\nfunction unboxComplex (tag, complex) {\n  // Try to unbox by calling `valueOf()`. `describePrimitive()` will return\n  // `null` if the resulting value is not a primitive, in which case it's\n  // ignored.\n  if (typeof complex.valueOf === 'function') {\n    const value = complex.valueOf()\n    if (value !== complex) return describePrimitive(value)\n  }\n\n  return null\n}\n\nfunction registerPlugins (plugins) {\n  if (!Array.isArray(plugins) || plugins.length === 0) return () => null\n\n  const tryFns = pluginRegistry.getTryDescribeValues(plugins)\n  return (value, stringTag, ctor) => {\n    for (const tryDescribeValue of tryFns) {\n      const describeValue = tryDescribeValue(value, stringTag, ctor)\n      if (describeValue) return describeValue\n    }\n\n    return null\n  }\n}\n\nfunction describeComplex (value, registry, tryPlugins, describeAny, describeItem, describeMapEntry, describeProperty) {\n  if (registry.has(value)) return registry.get(value)\n\n  const stringTag = getStringTag(value)\n  const ctor = getCtor(stringTag, value)\n  const pointer = registry.alloc(value)\n\n  let unboxed\n  let describeValue = tryPlugins(value, stringTag, ctor)\n  if (describeValue === null) {\n    if (SpecializedComplexes.has(stringTag)) {\n      describeValue = SpecializedComplexes.get(stringTag)\n    } else {\n      unboxed = unboxComplex(stringTag, value)\n      if (unboxed !== null) {\n        describeValue = boxedValue.describe\n      } else {\n        describeValue = objectValue.describe\n      }\n    }\n  }\n\n  const descriptor = describeValue({\n    ctor,\n    describeAny,\n    describeItem,\n    describeMapEntry,\n    describeProperty,\n    pointer: pointer.index,\n    stringTag,\n    unboxed,\n    value\n  })\n  pointer.descriptor = descriptor\n  return descriptor\n}\n\nfunction describe (value, options) {\n  const primitive = describePrimitive(value)\n  if (primitive !== null) return primitive\n\n  const registry = new Registry()\n  const tryPlugins = registerPlugins(options && options.plugins)\n  const curriedComplex = c => {\n    return describeComplex(c, registry, tryPlugins, describeAny, describeItem, describeMapEntry, describeProperty)\n  }\n\n  const describeAny = any => {\n    const descriptor = describePrimitive(any)\n    return descriptor !== null\n      ? descriptor\n      : curriedComplex(any)\n  }\n\n  const describeItem = (index, valueDescriptor) => {\n    return valueDescriptor.isPrimitive === true\n      ? itemDescriptor.describePrimitive(index, valueDescriptor)\n      : itemDescriptor.describeComplex(index, valueDescriptor)\n  }\n\n  const describeMapEntry = (keyDescriptor, valueDescriptor) => {\n    return mapEntryDescriptor.describe(keyDescriptor, valueDescriptor)\n  }\n\n  const describeProperty = (key, valueDescriptor) => {\n    const keyDescriptor = describePrimitive(key)\n    return valueDescriptor.isPrimitive === true\n      ? propertyDescriptor.describePrimitive(keyDescriptor, valueDescriptor)\n      : propertyDescriptor.describeComplex(keyDescriptor, valueDescriptor)\n  }\n\n  return curriedComplex(value)\n}\nmodule.exports = describe\n"},"hash":"4e929fe00c49aab129e130ba8f0b9c55"}