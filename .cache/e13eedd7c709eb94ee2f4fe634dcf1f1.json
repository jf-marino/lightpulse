{"dependencies":[{"name":"../constants","loc":{"line":3,"column":26}},{"name":"./object","loc":{"line":4,"column":23}}],"generated":{"js":"'use strict'\n\nconst constants = require('../constants')\nconst object = require('./object')\n\nconst AMBIGUOUS = constants.AMBIGUOUS\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describe (props) {\n  return new DescribedArgumentsValue(Object.assign({\n    // Treat as an array, to allow comparisons with arrays\n    isArray: true,\n    isList: true\n  }, props, { ctor: 'Arguments' }))\n}\nexports.describe = describe\n\nfunction deserialize (state, recursor) {\n  return new DeserializedArgumentsValue(state, recursor)\n}\nexports.deserialize = deserialize\n\nconst tag = Symbol('ArgumentsValue')\nexports.tag = tag\n\nclass ArgumentsValue extends object.ObjectValue {\n  compare (expected) {\n    if (expected.isComplex !== true) return UNEQUAL\n\n    // When used on the left-hand side of a comparison, argument values may be\n    // compared to arrays.\n    if (expected.stringTag === 'Array') return AMBIGUOUS\n\n    return super.compare(expected)\n  }\n}\nObject.defineProperty(ArgumentsValue.prototype, 'tag', { value: tag })\n\nconst DescribedArgumentsValue = object.DescribedMixin(ArgumentsValue)\n\nclass DeserializedArgumentsValue extends object.DeserializedMixin(ArgumentsValue) {\n  compare (expected) {\n    // Deserialized argument values may only be compared to argument values.\n    return expected.isComplex === true && expected.stringTag === 'Array'\n      ? UNEQUAL\n      : super.compare(expected)\n  }\n}\n"},"hash":"22ab3509c05bdeebbfffde390a2c002f"}