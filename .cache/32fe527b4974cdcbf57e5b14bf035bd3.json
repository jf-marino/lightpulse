{"dependencies":[{"name":"../constants","loc":{"line":3,"column":26}},{"name":"../formatUtils","loc":{"line":4,"column":28}},{"name":"../lineBuilder","loc":{"line":5,"column":28}},{"name":"../recursorUtils","loc":{"line":6,"column":30}},{"name":"../metaDescriptors/stats","loc":{"line":7,"column":33}},{"name":"./object","loc":{"line":8,"column":23}},{"name":"buffer"}],"generated":{"js":"var Buffer = require(\"buffer\").Buffer;\n'use strict'\n\nconst constants = require('../constants')\nconst formatUtils = require('../formatUtils')\nconst lineBuilder = require('../lineBuilder')\nconst recursorUtils = require('../recursorUtils')\nconst propertyStatsTag = require('../metaDescriptors/stats').propertyTag\nconst object = require('./object')\n\nconst DEEP_EQUAL = constants.DEEP_EQUAL\nconst UNEQUAL = constants.UNEQUAL\n\nfunction getBuffer (value) {\n  // Assume at least Node.js 4.5.0, which introduces Buffer.from()\n  const buffer = Buffer.from(value.buffer)\n  return value.byteLength !== value.buffer.byteLength\n    ? buffer.slice(value.byteOffset, value.byteOffset + value.byteLength)\n    : buffer\n}\nexports.getBuffer = getBuffer\n\nfunction describe (props) {\n  return new DescribedTypedArrayValue(Object.assign({\n    buffer: getBuffer(props.value),\n    // Set isArray and isList so the property recursor excludes the byte accessors\n    isArray: true,\n    isList: true\n  }, props))\n}\nexports.describe = describe\n\nfunction deserialize (state, recursor) {\n  return new DeserializedTypedArrayValue(state, recursor)\n}\nexports.deserialize = deserialize\n\nfunction deserializeBytes (buffer) {\n  return new Bytes(buffer)\n}\nexports.deserializeBytes = deserializeBytes\n\nconst bytesTag = Symbol('Bytes')\nexports.bytesTag = bytesTag\n\nconst tag = Symbol('TypedArrayValue')\nexports.tag = tag\n\nclass Bytes {\n  constructor (buffer) {\n    this.buffer = buffer\n  }\n\n  compare (expected) {\n    return expected.tag === bytesTag && this.buffer.equals(expected.buffer)\n      ? DEEP_EQUAL\n      : UNEQUAL\n  }\n\n  formatDeep (theme, indent) {\n    const indentation = indent\n    const lines = lineBuilder.buffer()\n\n    // Display 4-byte words, 8 per line\n    let string = ''\n    let isFirst = true\n    for (let offset = 0; offset < this.buffer.length; offset += 4) {\n      if (offset > 0) {\n        if (offset % 32 === 0) {\n          if (isFirst) {\n            lines.append(lineBuilder.first(string))\n            isFirst = false\n          } else {\n            lines.append(lineBuilder.line(string))\n          }\n          string = String(indentation)\n        } else {\n          string += ' '\n        }\n      }\n      string += formatUtils.wrap(theme.typedArray.bytes, this.buffer.toString('hex', offset, offset + 4))\n    }\n\n    return isFirst\n      ? lineBuilder.single(string)\n      : lines.append(lineBuilder.last(string))\n  }\n\n  serialize () {\n    return this.buffer\n  }\n}\nObject.defineProperty(Bytes.prototype, 'tag', { value: bytesTag })\n\nclass TypedArrayValue extends object.ObjectValue {\n  constructor (props) {\n    super(props)\n    this.buffer = props.buffer\n  }\n\n  formatShallow (theme, indent) {\n    return super.formatShallow(theme, indent).customize({\n      shouldFormat (subject) {\n        if (subject.tag === propertyStatsTag) return subject.size > 1\n        if (subject.isProperty === true) return subject.key.value !== 'byteLength'\n        if (subject.tag === bytesTag) return subject.buffer.byteLength > 0\n        return true\n      }\n    })\n  }\n}\nObject.defineProperty(TypedArrayValue.prototype, 'tag', { value: tag })\nexports.TypedArrayValue = TypedArrayValue\n\nfunction DescribedMixin (base) {\n  return class extends object.DescribedMixin(base) {\n    // The list isn't recursed. Instead a Bytes instance is returned by the main\n    // recursor.\n    createListRecursor () {\n      return recursorUtils.NOOP_RECURSOR\n    }\n\n    createPropertyRecursor () {\n      const recursor = super.createPropertyRecursor()\n      const size = recursor.size + 1\n\n      let done = false\n      const next = () => {\n        if (done) return null\n\n        const property = recursor.next()\n        if (property) return property\n\n        done = true\n        return this.describeProperty('byteLength', this.describeAny(this.buffer.byteLength))\n      }\n\n      return { size, next }\n    }\n\n    createRecursor () {\n      return recursorUtils.unshift(super.createRecursor(), new Bytes(this.buffer))\n    }\n  }\n}\nexports.DescribedMixin = DescribedMixin\n\nconst DescribedTypedArrayValue = DescribedMixin(TypedArrayValue)\n\nfunction DeserializedMixin (base) {\n  return class extends object.DeserializedMixin(base) {\n    constructor (state, recursor) {\n      super(state, recursor)\n\n      // Get the Bytes descriptor from the recursor. It contains the buffer.\n      const bytesDescriptor = this.createRecursor()()\n      this.buffer = bytesDescriptor.buffer\n    }\n  }\n}\nexports.DeserializedMixin = DeserializedMixin\n\nconst DeserializedTypedArrayValue = DeserializedMixin(TypedArrayValue)\n"},"hash":"8d0e2adc59a7dde6ebcd52614c0015d8"}