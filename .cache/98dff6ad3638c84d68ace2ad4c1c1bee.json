{"dependencies":[{"name":"./lineBuilder","loc":{"line":3,"column":28}}],"generated":{"js":"'use strict'\n\nconst lineBuilder = require('./lineBuilder')\n\nfunction wrap (fromTheme, value) {\n  return fromTheme.open + value + fromTheme.close\n}\nexports.wrap = wrap\n\nfunction formatCtorAndStringTag (theme, object) {\n  if (!object.ctor) return wrap(theme.object.stringTag, object.stringTag)\n\n  let retval = wrap(theme.object.ctor, object.ctor)\n  if (object.stringTag && object.stringTag !== object.ctor && object.stringTag !== 'Object') {\n    retval += ' ' + wrap(theme.object.secondaryStringTag, object.stringTag)\n  }\n  return retval\n}\nexports.formatCtorAndStringTag = formatCtorAndStringTag\n\nclass ObjectFormatter {\n  constructor (object, theme, indent) {\n    this.object = object\n    this.theme = theme\n    this.indent = indent\n\n    this.increaseIndent = true\n\n    this.innerLines = lineBuilder.buffer()\n    this.pendingStats = null\n  }\n\n  append (formatted, origin) {\n    if (origin.isStats === true) {\n      this.pendingStats = formatted\n    } else {\n      if (this.pendingStats !== null) {\n        if (!this.innerLines.isEmpty) {\n          this.innerLines.append(this.pendingStats)\n        }\n        this.pendingStats = null\n      }\n      this.innerLines.append(formatted)\n    }\n  }\n\n  finalize () {\n    const variant = this.object.isList\n      ? this.theme.list\n      : this.theme.object\n\n    const ctor = this.object.ctor\n    const stringTag = this.object.stringTag\n    const prefix = (ctor === 'Array' || ctor === 'Object') && ctor === stringTag\n      ? ''\n      : formatCtorAndStringTag(this.theme, this.object) + ' '\n\n    if (this.innerLines.isEmpty) {\n      return lineBuilder.single(prefix + variant.openBracket + variant.closeBracket)\n    }\n\n    return lineBuilder.first(prefix + variant.openBracket)\n      .concat(this.innerLines.withFirstPrefixed(this.indent.increase()).stripFlags())\n      .append(lineBuilder.last(this.indent + variant.closeBracket))\n  }\n\n  maxDepth () {\n    const variant = this.object.isList\n      ? this.theme.list\n      : this.theme.object\n\n    return lineBuilder.single(\n      formatCtorAndStringTag(this.theme, this.object) + ' ' + variant.openBracket +\n      ' ' + this.theme.maxDepth + ' ' + variant.closeBracket)\n  }\n\n  shouldFormat () {\n    return true\n  }\n\n  customize (methods) {\n    if (methods.finalize) {\n      this.finalize = () => methods.finalize(this.innerLines)\n    }\n    if (methods.maxDepth) {\n      this.maxDepth = methods.maxDepth\n    }\n    if (methods.shouldFormat) {\n      this.shouldFormat = methods.shouldFormat\n    }\n\n    return this\n  }\n}\nexports.ObjectFormatter = ObjectFormatter\n\nclass SingleValueFormatter {\n  constructor (theme, finalizeFn, increaseIndent) {\n    this.theme = theme\n    this.finalizeFn = finalizeFn\n    this.hasValue = false\n    this.increaseIndent = increaseIndent === true\n    this.value = null\n  }\n\n  append (formatted) {\n    if (this.hasValue) throw new Error('Formatter buffer can only take one formatted value.')\n\n    this.hasValue = true\n    this.value = formatted\n  }\n\n  finalize () {\n    if (!this.hasValue) throw new Error('Formatter buffer never received a formatted value.')\n\n    return this.finalizeFn(this.value)\n  }\n\n  maxDepth () {\n    return this.finalizeFn(lineBuilder.single(this.theme.maxDepth))\n  }\n}\nexports.SingleValueFormatter = SingleValueFormatter\n"},"hash":"2bf5e8dd5155d1d18d4fbf7cd6e0b9be"}