{"dependencies":[{"name":"./package.json","loc":{"line":3,"column":20}},{"name":"./lib/elementFactory","loc":{"line":4,"column":31}},{"name":"./lib/testJsonFactory","loc":{"line":5,"column":32}}],"generated":{"js":"'use strict'\n\nconst pkg = require('./package.json')\nconst elementFactory = require('./lib/elementFactory')\nconst testJsonFactory = require('./lib/testJsonFactory')\n\n// Must be unique across all registered plugins.\nexports.name = pkg.name\n\n// Expected API version to be passed to register().\nexports.apiVersion = 1\n\n// Expected minimal version of Concordance. Concordance will increment its API\n// version for breaking changes, this is useful if you rely on features or\n// patches that were introduced in a specific version of Concordance.\nexports.minimalConcordanceVersion = '1.0.0'\n\n// Plugin-specific version of its serialization output.\nexports.serializerVersion = 1\n\nexports.theme = {\n  react: {\n    functionType: '\\u235F',\n    openTag: {\n      start: '<',\n      end: '>',\n      selfClose: '/',\n      selfCloseVoid: ' /'\n    },\n    closeTag: {\n      open: '</',\n      close: '>'\n    },\n    tagName: {open: '', close: ''},\n    attribute: {\n      separator: '=',\n      value: {\n        openBracket: '{',\n        closeBracket: '}',\n        string: {\n          line: {open: '\"', close: '\"', escapeQuote: '\"'}\n        }\n      }\n    },\n    child: {\n      openBracket: '{',\n      closeBracket: '}',\n      string: {\n        line: {open: '', close: '', escapeQuote: ''},\n        multiline: {start: '', end: '', escapeQuote: ''}\n      }\n    }\n  }\n}\n\nconst ELEMENT = Symbol.for('react.element')\nconst TEST_JSON = Symbol.for('react.test.json')\n\nfunction register (api) {\n  const reactTags = new Set()\n  const element = elementFactory(api, reactTags)\n  const testJson = testJsonFactory(api, element)\n\n  api.addDescriptor(0x01, element.tag, element.deserialize)\n  api.addDescriptor(0x02, testJson.tag, testJson.deserialize)\n\n  reactTags.add(element.tag).add(testJson.tag)\n\n  return value => {\n    if (value.$$typeof === ELEMENT) return element.describe\n    if (value.$$typeof === TEST_JSON) return testJson.describe\n    return null\n  }\n}\nexports.register = register\n"},"hash":"196708b4f63dccdb8d409a0dae0903ab"}