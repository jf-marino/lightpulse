{"dependencies":[{"name":"process"}],"generated":{"js":"var process = require(\"process\");\n'use strict';\n\nconst beforeExitSubscribers = new Set();\nconst beforeExitHandler = () => {\n\tfor (const subscriber of beforeExitSubscribers) {\n\t\tsubscriber();\n\t}\n};\nconst onBeforeExit = subscriber => {\n\tif (beforeExitSubscribers.size === 0) {\n\t\t// Only listen for the event once, no matter how many Sequences are run\n\t\t// concurrently.\n\t\tprocess.on('beforeExit', beforeExitHandler);\n\t}\n\n\tbeforeExitSubscribers.add(subscriber);\n\treturn {\n\t\tdispose() {\n\t\t\tbeforeExitSubscribers.delete(subscriber);\n\t\t\tif (beforeExitSubscribers.size === 0) {\n\t\t\t\tprocess.removeListener('beforeExit', beforeExitHandler);\n\t\t\t}\n\t\t}\n\t};\n};\n\nclass Sequence {\n\tconstructor(runnables, bail) {\n\t\tif (!Array.isArray(runnables)) {\n\t\t\tthrow new TypeError('Expected an array of runnables');\n\t\t}\n\n\t\tthis.runnables = runnables;\n\t\tthis.bail = bail || false;\n\t}\n\n\trun() {\n\t\tconst iterator = this.runnables[Symbol.iterator]();\n\n\t\tlet activeRunnable;\n\t\tconst beforeExit = onBeforeExit(() => {\n\t\t\tif (activeRunnable.finishDueToInactivity) {\n\t\t\t\tactiveRunnable.finishDueToInactivity();\n\t\t\t}\n\t\t});\n\n\t\tlet allPassed = true;\n\t\tconst finish = () => {\n\t\t\tbeforeExit.dispose();\n\t\t\treturn allPassed;\n\t\t};\n\n\t\tconst runNext = () => {\n\t\t\tlet promise;\n\n\t\t\tfor (let next = iterator.next(); !next.done; next = iterator.next()) {\n\t\t\t\tactiveRunnable = next.value;\n\t\t\t\tconst passedOrPromise = activeRunnable.run();\n\t\t\t\tif (!passedOrPromise) {\n\t\t\t\t\tallPassed = false;\n\n\t\t\t\t\tif (this.bail) {\n\t\t\t\t\t\t// Stop if the test failed and bail mode is on.\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (passedOrPromise !== true) {\n\t\t\t\t\tpromise = passedOrPromise;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!promise) {\n\t\t\t\treturn finish();\n\t\t\t}\n\n\t\t\treturn promise.then(passed => {\n\t\t\t\tif (!passed) {\n\t\t\t\t\tallPassed = false;\n\n\t\t\t\t\tif (this.bail) {\n\t\t\t\t\t\t// Stop if the test failed and bail mode is on.\n\t\t\t\t\t\treturn finish();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn runNext();\n\t\t\t});\n\t\t};\n\n\t\treturn runNext();\n\t}\n}\n\nmodule.exports = Sequence;\n"},"hash":"5d9a95b461c554f755b4300cbde79193"}