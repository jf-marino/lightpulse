{"dependencies":[{"name":"../constants","loc":{"line":3,"column":26}},{"name":"../lineBuilder","loc":{"line":4,"column":28}},{"name":"../recursorUtils","loc":{"line":5,"column":30}}],"generated":{"js":"'use strict'\n\nconst constants = require('../constants')\nconst lineBuilder = require('../lineBuilder')\nconst recursorUtils = require('../recursorUtils')\n\nconst DEEP_EQUAL = constants.DEEP_EQUAL\nconst UNEQUAL = constants.UNEQUAL\n\nfunction describeIterableRecursor (recursor) {\n  return new IterableStats(recursor.size)\n}\nexports.describeIterableRecursor = describeIterableRecursor\n\nfunction describeListRecursor (recursor) {\n  return new ListStats(recursor.size)\n}\nexports.describeListRecursor = describeListRecursor\n\nfunction describePropertyRecursor (recursor) {\n  return new PropertyStats(recursor.size)\n}\nexports.describePropertyRecursor = describePropertyRecursor\n\nfunction deserializeIterableStats (size) {\n  return new IterableStats(size)\n}\nexports.deserializeIterableStats = deserializeIterableStats\n\nfunction deserializeListStats (size) {\n  return new ListStats(size)\n}\nexports.deserializeListStats = deserializeListStats\n\nfunction deserializePropertyStats (size) {\n  return new PropertyStats(size)\n}\nexports.deserializePropertyStats = deserializePropertyStats\n\nconst iterableTag = Symbol('IterableStats')\nexports.iterableTag = iterableTag\n\nconst listTag = Symbol('ListStats')\nexports.listTag = listTag\n\nconst propertyTag = Symbol('PropertyStats')\nexports.propertyTag = propertyTag\n\nclass Stats {\n  constructor (size) {\n    this.size = size\n  }\n\n  formatDeep (theme) {\n    return lineBuilder.single(theme.stats.separator)\n  }\n\n  prepareDiff (expected, lhsRecursor, rhsRecursor, compareComplexShape) {\n    if (expected.isStats !== true || expected.tag === this.tag) return null\n\n    // Try to line up stats descriptors with the same tag.\n    const rhsFork = recursorUtils.fork(rhsRecursor)\n    const initialExpected = expected\n\n    const missing = []\n    while (expected !== null && this.tag !== expected.tag) {\n      missing.push(expected)\n      expected = rhsFork.shared()\n    }\n\n    if (expected !== null && missing.length > 0) {\n      return {\n        multipleAreMissing: true,\n        descriptors: missing,\n        lhsRecursor: recursorUtils.unshift(lhsRecursor, this),\n        // Use original `rhsRecursor`, not `rhsFork`, since the consumed\n        // descriptors are returned with the `missing` array.\n        rhsRecursor: recursorUtils.unshift(rhsRecursor, expected)\n      }\n    }\n\n    const lhsFork = recursorUtils.fork(lhsRecursor)\n    let actual = this\n\n    const extraneous = []\n    while (actual !== null && actual.tag !== initialExpected.tag) {\n      extraneous.push(actual)\n      actual = lhsFork.shared()\n    }\n\n    if (actual !== null && extraneous.length > 0) {\n      return {\n        multipleAreExtraneous: true,\n        descriptors: extraneous,\n        // Use original `lhsRecursor`, not `lhsFork`, since the consumed\n        // descriptors are returned with the `extraneous` array.\n        lhsRecursor: recursorUtils.unshift(lhsRecursor, actual),\n        rhsRecursor: recursorUtils.unshift(rhsFork.recursor, initialExpected)\n      }\n    }\n\n    return null\n  }\n\n  serialize () {\n    return this.size\n  }\n}\nObject.defineProperty(Stats.prototype, 'isStats', { value: true })\n\nclass IterableStats extends Stats {\n  compare (expected) {\n    return expected.tag === iterableTag && this.size === expected.size\n      ? DEEP_EQUAL\n      : UNEQUAL\n  }\n}\nObject.defineProperty(IterableStats.prototype, 'tag', { value: iterableTag })\n\nclass ListStats extends Stats {\n  compare (expected) {\n    return expected.tag === listTag && this.size === expected.size\n      ? DEEP_EQUAL\n      : UNEQUAL\n  }\n}\nObject.defineProperty(ListStats.prototype, 'tag', { value: listTag })\n\nclass PropertyStats extends Stats {\n  compare (expected) {\n    return expected.tag === propertyTag && this.size === expected.size\n      ? DEEP_EQUAL\n      : UNEQUAL\n  }\n}\nObject.defineProperty(PropertyStats.prototype, 'tag', { value: propertyTag })\n"},"hash":"d2381aee030262d38abf57bb4a0311cc"}