{"dependencies":[{"name":"./describe","loc":{"line":3,"column":25}},{"name":"./lineBuilder","loc":{"line":4,"column":28}},{"name":"./themeUtils","loc":{"line":5,"column":27}},{"name":"./Circular","loc":{"line":6,"column":25}},{"name":"./Indenter","loc":{"line":7,"column":25}}],"generated":{"js":"'use strict'\n\nconst describe = require('./describe')\nconst lineBuilder = require('./lineBuilder')\nconst themeUtils = require('./themeUtils')\nconst Circular = require('./Circular')\nconst Indenter = require('./Indenter')\n\nconst alwaysFormat = () => true\nconst fixedIndent = new Indenter(0, '  ')\n\nfunction formatDescriptor (subject, options) {\n  const theme = themeUtils.normalize(options)\n  if (subject.isPrimitive === true) {\n    const formatted = subject.formatDeep(themeUtils.applyModifiers(subject, theme), fixedIndent)\n    return formatted.toString({diff: false})\n  }\n\n  const circular = new Circular()\n  const maxDepth = (options && options.maxDepth) || 0\n\n  let indent = fixedIndent\n\n  const buffer = lineBuilder.buffer()\n  const stack = []\n  let topIndex = -1\n\n  do {\n    if (circular.has(subject)) {\n      stack[topIndex].formatter.append(lineBuilder.single(theme.circular), subject)\n    } else {\n      let didFormat = false\n      if (typeof subject.formatDeep === 'function') {\n        const formatted = subject.formatDeep(themeUtils.applyModifiers(subject, theme), indent)\n        if (formatted !== null) {\n          didFormat = true\n          if (topIndex === -1) {\n            buffer.append(formatted)\n          } else {\n            stack[topIndex].formatter.append(formatted, subject)\n          }\n        }\n      }\n\n      if (!didFormat && typeof subject.formatShallow === 'function') {\n        const formatter = subject.formatShallow(themeUtils.applyModifiers(subject, theme), indent)\n        const recursor = subject.createRecursor()\n\n        if (formatter.increaseIndent && maxDepth > 0 && indent.level === maxDepth) {\n          const isEmpty = recursor() === null\n          const formatted = !isEmpty && typeof formatter.maxDepth === 'function'\n            ? formatter.maxDepth()\n            : formatter.finalize()\n          stack[topIndex].formatter.append(formatted, subject)\n        } else {\n          stack.push({\n            formatter,\n            recursor,\n            decreaseIndent: formatter.increaseIndent,\n            shouldFormat: formatter.shouldFormat || alwaysFormat,\n            subject\n          })\n          topIndex++\n\n          if (formatter.increaseIndent) indent = indent.increase()\n          circular.add(subject)\n        }\n      }\n    }\n\n    while (topIndex >= 0) {\n      do {\n        subject = stack[topIndex].recursor()\n      } while (subject && !stack[topIndex].shouldFormat(subject))\n\n      if (subject) {\n        break\n      }\n\n      const record = stack.pop()\n      topIndex--\n      if (record.decreaseIndent) indent = indent.decrease()\n      circular.delete(record.subject)\n\n      const formatted = record.formatter.finalize()\n      if (topIndex === -1) {\n        buffer.append(formatted)\n      } else {\n        stack[topIndex].formatter.append(formatted, record.subject)\n      }\n    }\n  } while (topIndex >= 0)\n\n  return buffer.toString({diff: false})\n}\nexports.formatDescriptor = formatDescriptor\n\nfunction format (value, options) {\n  return formatDescriptor(describe(value, options), options)\n}\nexports.format = format\n"},"hash":"459ef7036a8b2a9daca9a55e4be59c8f"}