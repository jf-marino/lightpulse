{"dependencies":[],"generated":{"js":"'use strict'\n\nconst ACTUAL = Symbol('lineBuilder.gutters.ACTUAL')\nconst EXPECTED = Symbol('lineBuilder.gutters.EXPECTED')\n\nfunction translateGutter (theme, invert, gutter) {\n  if (invert) {\n    if (gutter === ACTUAL) return theme.diffGutters.expected\n    if (gutter === EXPECTED) return theme.diffGutters.actual\n  } else {\n    if (gutter === ACTUAL) return theme.diffGutters.actual\n    if (gutter === EXPECTED) return theme.diffGutters.expected\n  }\n  return theme.diffGutters.padding\n}\n\nclass Line {\n  constructor (isFirst, isLast, gutter, stringValue) {\n    this.isFirst = isFirst\n    this.isLast = isLast\n    this.gutter = gutter\n    this.stringValue = stringValue\n  }\n\n  * [Symbol.iterator] () {\n    yield this\n  }\n\n  get isEmpty () {\n    return false\n  }\n\n  get hasGutter () {\n    return this.gutter !== null\n  }\n\n  get isSingle () {\n    return this.isFirst && this.isLast\n  }\n\n  append (other) {\n    return this.concat(other)\n  }\n\n  concat (other) {\n    return new Collection()\n      .append(this)\n      .append(other)\n  }\n\n  toString (options) {\n    if (options.diff === false) return this.stringValue\n\n    return translateGutter(options.theme, options.invert, this.gutter) + this.stringValue\n  }\n\n  mergeWithInfix (infix, other) {\n    if (other.isLine !== true) {\n      return new Collection()\n        .append(this)\n        .mergeWithInfix(infix, other)\n    }\n\n    return new Line(this.isFirst, other.isLast, other.gutter, this.stringValue + infix + other.stringValue)\n  }\n\n  withFirstPrefixed (prefix) {\n    if (!this.isFirst) return this\n\n    return new Line(true, this.isLast, this.gutter, prefix + this.stringValue)\n  }\n\n  withLastPostfixed (postfix) {\n    if (!this.isLast) return this\n\n    return new Line(this.isFirst, true, this.gutter, this.stringValue + postfix)\n  }\n\n  stripFlags () {\n    return new Line(false, false, this.gutter, this.stringValue)\n  }\n\n  decompose () {\n    return new Collection()\n      .append(this)\n      .decompose()\n  }\n}\nObject.defineProperty(Line.prototype, 'isLine', {value: true})\n\nclass Collection {\n  constructor () {\n    this.buffer = []\n  }\n\n  * [Symbol.iterator] () {\n    for (const appended of this.buffer) {\n      for (const line of appended) yield line\n    }\n  }\n\n  get isEmpty () {\n    return this.buffer.length === 0\n  }\n\n  get hasGutter () {\n    for (const line of this) {\n      if (line.hasGutter) return true\n    }\n    return false\n  }\n\n  get isSingle () {\n    const iterator = this[Symbol.iterator]()\n    iterator.next()\n    return iterator.next().done === true\n  }\n\n  append (lineOrLines) {\n    if (!lineOrLines.isEmpty) this.buffer.push(lineOrLines)\n    return this\n  }\n\n  concat (other) {\n    return new Collection()\n      .append(this)\n      .append(other)\n  }\n\n  toString (options) {\n    let lines = this\n\n    if (options.invert) {\n      lines = new Collection()\n      let buffer = new Collection()\n\n      let prev = null\n      for (const line of this) {\n        if (line.gutter === ACTUAL) {\n          if (prev !== null && prev.gutter !== ACTUAL && !buffer.isEmpty) {\n            lines.append(buffer)\n            buffer = new Collection()\n          }\n\n          buffer.append(line)\n        } else if (line.gutter === EXPECTED) {\n          lines.append(line)\n        } else {\n          if (!buffer.isEmpty) {\n            lines.append(buffer)\n            buffer = new Collection()\n          }\n\n          lines.append(line)\n        }\n\n        prev = line\n      }\n      lines.append(buffer)\n    }\n\n    return Array.from(lines, line => line.toString(options)).join('\\n')\n  }\n\n  mergeWithInfix (infix, from) {\n    if (from.isEmpty) throw new Error('Cannot merge, `from` is empty.')\n\n    const otherLines = Array.from(from)\n    if (!otherLines[0].isFirst) throw new Error('Cannot merge, `from` has no first line.')\n\n    const merged = new Collection()\n    let seenLast = false\n    for (const line of this) {\n      if (seenLast) throw new Error('Cannot merge line, the last line has already been seen.')\n\n      if (!line.isLast) {\n        merged.append(line)\n        continue\n      }\n\n      seenLast = true\n      for (const other of otherLines) {\n        if (other.isFirst) {\n          merged.append(line.mergeWithInfix(infix, other))\n        } else {\n          merged.append(other)\n        }\n      }\n    }\n    return merged\n  }\n\n  withFirstPrefixed (prefix) {\n    return new Collection()\n      .append(Array.from(this, line => line.withFirstPrefixed(prefix)))\n  }\n\n  withLastPostfixed (postfix) {\n    return new Collection()\n      .append(Array.from(this, line => line.withLastPostfixed(postfix)))\n  }\n\n  stripFlags () {\n    return new Collection()\n      .append(Array.from(this, line => line.stripFlags()))\n  }\n\n  decompose () {\n    const first = {actual: new Collection(), expected: new Collection()}\n    const last = {actual: new Collection(), expected: new Collection()}\n    const remaining = new Collection()\n\n    for (const line of this) {\n      if (line.isFirst && line.gutter === ACTUAL) {\n        first.actual.append(line)\n      } else if (line.isFirst && line.gutter === EXPECTED) {\n        first.expected.append(line)\n      } else if (line.isLast && line.gutter === ACTUAL) {\n        last.actual.append(line)\n      } else if (line.isLast && line.gutter === EXPECTED) {\n        last.expected.append(line)\n      } else {\n        remaining.append(line)\n      }\n    }\n\n    return {first, last, remaining}\n  }\n}\nObject.defineProperty(Collection.prototype, 'isCollection', {value: true})\n\nfunction setDefaultGutter (iterable, gutter) {\n  return new Collection()\n    .append(Array.from(iterable, line => {\n      return line.gutter === null\n        ? new Line(line.isFirst, line.isLast, gutter, line.stringValue)\n        : line\n    }))\n}\n\nmodule.exports = {\n  buffer () {\n    return new Collection()\n  },\n\n  first (stringValue) {\n    return new Line(true, false, null, stringValue)\n  },\n\n  last (stringValue) {\n    return new Line(false, true, null, stringValue)\n  },\n\n  line (stringValue) {\n    return new Line(false, false, null, stringValue)\n  },\n\n  single (stringValue) {\n    return new Line(true, true, null, stringValue)\n  },\n\n  setDefaultGutter (lineOrCollection) {\n    return lineOrCollection\n  },\n\n  actual: {\n    first (stringValue) {\n      return new Line(true, false, ACTUAL, stringValue)\n    },\n\n    last (stringValue) {\n      return new Line(false, true, ACTUAL, stringValue)\n    },\n\n    line (stringValue) {\n      return new Line(false, false, ACTUAL, stringValue)\n    },\n\n    single (stringValue) {\n      return new Line(true, true, ACTUAL, stringValue)\n    },\n\n    setDefaultGutter (lineOrCollection) {\n      return setDefaultGutter(lineOrCollection, ACTUAL)\n    }\n  },\n\n  expected: {\n    first (stringValue) {\n      return new Line(true, false, EXPECTED, stringValue)\n    },\n\n    last (stringValue) {\n      return new Line(false, true, EXPECTED, stringValue)\n    },\n\n    line (stringValue) {\n      return new Line(false, false, EXPECTED, stringValue)\n    },\n\n    single (stringValue) {\n      return new Line(true, true, EXPECTED, stringValue)\n    },\n\n    setDefaultGutter (lineOrCollection) {\n      return setDefaultGutter(lineOrCollection, EXPECTED)\n    }\n  }\n}\n"},"hash":"36ef5189077517ee8c2331c184a1ad6c"}