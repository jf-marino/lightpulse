{"dependencies":[{"name":"rxjs/Observable","loc":{"line":47,"column":27}}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [0, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar _this = this;\nexports.__esModule = true;\nvar Observable_1 = require(\"rxjs/Observable\");\nvar ajax = function (req) { return new Observable_1.Observable(function (obs) { return __awaiter(_this, void 0, void 0, function () {\n    var res, ex_1;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                _a.trys.push([0, 2, , 3]);\n                return [4 /*yield*/, fetch(req)];\n            case 1:\n                res = _a.sent();\n                obs.next(res);\n                obs.complete();\n                return [3 /*break*/, 3];\n            case 2:\n                ex_1 = _a.sent();\n                obs.error(ex_1);\n                return [3 /*break*/, 3];\n            case 3: return [2 /*return*/];\n        }\n    });\n}); }); };\nvar defaultOptions = {\n    method: 'GET',\n    cache: 'default'\n};\nexports.http = {\n    get: function (url, options) {\n        if (options === void 0) { options = {}; }\n        var req = new Request(url, __assign({}, defaultOptions, options, { method: 'GET' }));\n        return ajax(req);\n    },\n    post: function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        var req = new Request(url, __assign({}, defaultOptions, options, { method: 'POST', body: body }));\n        return ajax(req);\n    },\n    put: function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        var req = new Request(url, __assign({}, defaultOptions, options, { method: 'PUT', body: body }));\n        return ajax(req);\n    },\n    patch: function (url, body, options) {\n        if (options === void 0) { options = {}; }\n        var req = new Request(url, __assign({}, defaultOptions, options, { method: 'PATCH', body: body }));\n        return ajax(req);\n    },\n    \"delete\": function (url, options) {\n        if (options === void 0) { options = {}; }\n        var req = new Request(url, __assign({}, defaultOptions, options, { method: 'DELETE' }));\n        return ajax(req);\n    }\n};\n"},"hash":"80e63b12810d7b75092d5c035a5af598"}