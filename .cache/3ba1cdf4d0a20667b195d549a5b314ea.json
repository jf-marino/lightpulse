{"dependencies":[],"generated":{"js":"'use strict';\nmodule.exports = (options, fn, target) => {\n\tconst chainables = options.chainableMethods || {};\n\tconst spread = options.spread;\n\tconst defaults = Object.assign({}, options.defaults);\n\n\tfunction extend(target, getter, ctx) {\n\t\tfor (const key of Object.keys(chainables)) {\n\t\t\tObject.defineProperty(target, key, {\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true,\n\t\t\t\tget() {\n\t\t\t\t\treturn wrap(getter, chainables[key], ctx || this);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction wrap(createOpts, extensionOpts, ctx) {\n\t\tfunction wrappedOpts() {\n\t\t\treturn Object.assign(createOpts(), extensionOpts);\n\t\t}\n\n\t\tfunction wrappedFn() {\n\t\t\tlet args = new Array(arguments.length);\n\n\t\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\t\targs[i] = arguments[i];\n\t\t\t}\n\n\t\t\tif (spread) {\n\t\t\t\targs.unshift(wrappedOpts());\n\t\t\t} else {\n\t\t\t\targs = [wrappedOpts(), args];\n\t\t\t}\n\n\t\t\treturn fn.apply(ctx || this, args);\n\t\t}\n\n\t\textend(wrappedFn, wrappedOpts, ctx);\n\n\t\treturn wrappedFn;\n\t}\n\n\tfunction copyDefaults() {\n\t\treturn Object.assign({}, defaults);\n\t}\n\n\tif (target) {\n\t\textend(target, copyDefaults);\n\t\treturn target;\n\t}\n\n\treturn wrap(copyDefaults);\n};\n"},"hash":"8210f4878785b0d0e08883f6886926ac"}